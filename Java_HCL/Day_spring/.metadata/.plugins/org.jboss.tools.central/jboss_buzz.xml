<?xml version="1.0" encoding="UTF-8"?>
<?xml-stylesheet type="text/xsl" media="screen" href="/~d/styles/atom10full.xsl"?><?xml-stylesheet type="text/css" media="screen" href="http://feeds.feedburner.com/~d/styles/itemcontent.css"?><feed xmlns="http://www.w3.org/2005/Atom" xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:feedburner="http://rssnamespace.org/feedburner/ext/1.0"><title>JBoss Tools Aggregated Feed</title><link rel="alternate" href="http://tools.jboss.org" /><subtitle>JBoss Tools Aggregated Feed</subtitle><dc:creator>JBoss Tools</dc:creator><atom10:link xmlns:atom10="http://www.w3.org/2005/Atom" rel="self" type="application/atom+xml" href="http://feeds.feedburner.com/jbossbuzz" /><feedburner:info uri="jbossbuzz" /><atom10:link xmlns:atom10="http://www.w3.org/2005/Atom" rel="hub" href="http://pubsubhubbub.appspot.com/" /><entry><title>JMS 2.0 on Kubernetes with Apache ActiveMQ</title><link rel="alternate" href="http://feedproxy.google.com/~r/jbossbuzz/~3/QFvNjmXI1e8/" /><category term="feed_group_name_nonmiddleware" scheme="searchisko:content:tags" /><category term="feed_name_redhat_developer_blog" scheme="searchisko:content:tags" /><category term="Uncategorized" scheme="searchisko:content:tags" /><author><name>Editorial Team</name></author><id>searchisko:content:id:jbossorg_blog-jms_2_0_on_kubernetes_with_apache_activemq</id><updated>2019-12-20T08:00:39Z</updated><published>2019-12-20T08:00:39Z</published><content type="html">&lt;p&gt;&lt;a href="https://developers.redhat.com/devnation/"&gt;DevNation Live tech talks&lt;/a&gt; are hosted by the Red Hat technologists who create our products. These sessions include real solutions and code and sample projects to help you get started. In this talk, you’ll learn about &lt;a href="https://activemq.apache.org/"&gt;Apache ActiveMQ&lt;/a&gt; from Justin Ross, Engineering Manager at Red Hat.&lt;/p&gt; &lt;p&gt;Messaging has long been at the center of reliable, distributed systems. Now those systems are migrating to the cloud. This talk explores the latest improvements to the venerable &lt;a href="https://docs.oracle.com/javaee/6/tutorial/doc/bncdr.html"&gt;JMS API&lt;/a&gt; and shows how Apache ActiveMQ has evolved to function as a cloud-native service. It also looks at emerging &lt;a href="https://developers.redhat.com/developer-tools/java"&gt;Java&lt;/a&gt;-native alternatives to JMS. You&amp;#8217;ll learn how to make Java messaging and ActiveMQ part of a modern, event-driven application.&lt;/p&gt; &lt;p&gt;Watch the complete presentation:&lt;br /&gt; &lt;iframe src="https://www.youtube.com/embed/mkqVxWZfGfI" width="560" height="315" frameborder="0" allowfullscreen="allowfullscreen"&gt;&lt;/iframe&gt;&lt;/p&gt; &lt;h3&gt;&lt;b&gt;Learn more&lt;/b&gt;&lt;/h3&gt; &lt;p&gt;&lt;span style="font-weight: 400;"&gt;Join us at an upcoming&lt;/span&gt;&lt;a href="https://developers.redhat.com/events/"&gt; &lt;span style="font-weight: 400;"&gt;developer event&lt;/span&gt;&lt;/a&gt;&lt;span style="font-weight: 400;"&gt;, and see our collection of&lt;/span&gt;&lt;a href="https://developers.redhat.com/devnation/?page=0"&gt; &lt;span style="font-weight: 400;"&gt;past DevNation Live tech talks&lt;/span&gt;&lt;/a&gt;&lt;a href="https://developers.redhat.com/events/"&gt;&lt;span style="font-weight: 400;"&gt;.&lt;/span&gt;&lt;/a&gt;&lt;/p&gt; &lt;p&gt;&lt;a class="a2a_button_facebook" href="https://www.addtoany.com/add_to/facebook?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2019%2F12%2F20%2Fjms-2-0-on-kubernetes-with-apache-activemq%2F&amp;#38;linkname=JMS%202.0%20on%20Kubernetes%20with%20Apache%20ActiveMQ" title="Facebook" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_twitter" href="https://www.addtoany.com/add_to/twitter?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2019%2F12%2F20%2Fjms-2-0-on-kubernetes-with-apache-activemq%2F&amp;#38;linkname=JMS%202.0%20on%20Kubernetes%20with%20Apache%20ActiveMQ" title="Twitter" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_linkedin" href="https://www.addtoany.com/add_to/linkedin?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2019%2F12%2F20%2Fjms-2-0-on-kubernetes-with-apache-activemq%2F&amp;#38;linkname=JMS%202.0%20on%20Kubernetes%20with%20Apache%20ActiveMQ" title="LinkedIn" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_email" href="https://www.addtoany.com/add_to/email?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2019%2F12%2F20%2Fjms-2-0-on-kubernetes-with-apache-activemq%2F&amp;#38;linkname=JMS%202.0%20on%20Kubernetes%20with%20Apache%20ActiveMQ" title="Email" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_print" href="https://www.addtoany.com/add_to/print?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2019%2F12%2F20%2Fjms-2-0-on-kubernetes-with-apache-activemq%2F&amp;#38;linkname=JMS%202.0%20on%20Kubernetes%20with%20Apache%20ActiveMQ" title="Print" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_reddit" href="https://www.addtoany.com/add_to/reddit?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2019%2F12%2F20%2Fjms-2-0-on-kubernetes-with-apache-activemq%2F&amp;#38;linkname=JMS%202.0%20on%20Kubernetes%20with%20Apache%20ActiveMQ" title="Reddit" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_flipboard" href="https://www.addtoany.com/add_to/flipboard?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2019%2F12%2F20%2Fjms-2-0-on-kubernetes-with-apache-activemq%2F&amp;#38;linkname=JMS%202.0%20on%20Kubernetes%20with%20Apache%20ActiveMQ" title="Flipboard" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_dd addtoany_share_save addtoany_share" href="https://www.addtoany.com/share#url=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2019%2F12%2F20%2Fjms-2-0-on-kubernetes-with-apache-activemq%2F&amp;#038;title=JMS%202.0%20on%20Kubernetes%20with%20Apache%20ActiveMQ" data-a2a-url="https://developers.redhat.com/blog/2019/12/20/jms-2-0-on-kubernetes-with-apache-activemq/" data-a2a-title="JMS 2.0 on Kubernetes with Apache ActiveMQ"&gt;&lt;img src="https://static.addtoany.com/buttons/favicon.png" alt="Share"&gt;&lt;/a&gt;&lt;/p&gt;&lt;p&gt;The post &lt;a rel="nofollow" href="https://developers.redhat.com/blog/2019/12/20/jms-2-0-on-kubernetes-with-apache-activemq/"&gt;JMS 2.0 on Kubernetes with Apache ActiveMQ&lt;/a&gt; appeared first on &lt;a rel="nofollow" href="https://developers.redhat.com/blog"&gt;Red Hat Developer&lt;/a&gt;.&lt;/p&gt;&lt;img src="http://feeds.feedburner.com/~r/jbossbuzz/~4/QFvNjmXI1e8" height="1" width="1" alt=""/&gt;</content><summary>DevNation Live tech talks are hosted by the Red Hat technologists who create our products. These sessions include real solutions and code and sample projects to help you get started. In this talk, you’ll learn about Apache ActiveMQ from Justin Ross, Engineering Manager at Red Hat. Messaging has long been at the center of reliable, distributed systems. Now those systems are migrating to the cloud. ...</summary><dc:creator>Editorial Team</dc:creator><dc:date>2019-12-20T08:00:39Z</dc:date><feedburner:origLink>https://developers.redhat.com/blog/2019/12/20/jms-2-0-on-kubernetes-with-apache-activemq/</feedburner:origLink></entry><entry><title>Service Binding Operator: The Operator in action</title><link rel="alternate" href="http://feedproxy.google.com/~r/jbossbuzz/~3/cJuAXXCdz_c/" /><category term="cloud" scheme="searchisko:content:tags" /><category term="feed_group_name_nonmiddleware" scheme="searchisko:content:tags" /><category term="feed_name_redhat_developer_blog" scheme="searchisko:content:tags" /><category term="Java" scheme="searchisko:content:tags" /><category term="Node.js" scheme="searchisko:content:tags" /><category term="openshift" scheme="searchisko:content:tags" /><category term="operator" scheme="searchisko:content:tags" /><category term="Service Binding Operator" scheme="searchisko:content:tags" /><author><name>Shoubhik Bose</name></author><id>searchisko:content:id:jbossorg_blog-service_binding_operator_the_operator_in_action</id><updated>2019-12-20T08:00:09Z</updated><published>2019-12-20T08:00:09Z</published><content type="html">&lt;p&gt;&lt;a href="https://developers.redhat.com/blog/2019/12/05/introducing-the-service-binding-operator"&gt;In the previous article,&lt;/a&gt; we introduced the &lt;a href="https://github.com/redhat-developer/service-binding-operator"&gt;Service Binding Operator&lt;/a&gt; and explained how it functions. In this article, we&amp;#8217;ll look at a more advanced topic—custom environment variables—and walk through a typical usage scenario.&lt;/p&gt; &lt;h2&gt;Custom environment variables&lt;/h2&gt; &lt;p&gt;To make binding applications (e.g., legacy &lt;a href="https://developers.redhat.com/developer-tools/java"&gt;Java&lt;/a&gt; applications that depend on JDBS strings)  together with backing services more flexible, the Service Binding Operator supports the optional use of custom environment variables. To use custom environment variables, an application developer creates a &lt;code&gt;ServiceBindingRequest&lt;/code&gt; that looks like the one shown in Figure 1:&lt;/p&gt; &lt;div id="attachment_659827" style="width: 650px" class="wp-caption aligncenter"&gt;&lt;a href="https://developers.redhat.com/blog/wp-content/uploads/2019/11/img_5ddf553f8120c.png"&gt;&lt;img aria-describedby="caption-attachment-659827" class="wp-image-659827 size-large" src="https://developers.redhat.com/blog/wp-content/uploads/2019/11/img_5ddf553f8120c-1024x570.png" alt="A ServiceBindingRequest that uses custom environment variables." width="640" height="356" srcset="https://developers.redhat.com/blog/wp-content/uploads/2019/11/img_5ddf553f8120c-1024x570.png 1024w, https://developers.redhat.com/blog/wp-content/uploads/2019/11/img_5ddf553f8120c-300x167.png 300w, https://developers.redhat.com/blog/wp-content/uploads/2019/11/img_5ddf553f8120c-768x427.png 768w, https://developers.redhat.com/blog/wp-content/uploads/2019/11/img_5ddf553f8120c.png 1564w" sizes="(max-width: 640px) 100vw, 640px" /&gt;&lt;/a&gt;&lt;p id="caption-attachment-659827" class="wp-caption-text"&gt;Figure 1: A &lt;code&gt;ServiceBindingRequest&lt;/code&gt; that uses custom environment variables.&lt;/p&gt;&lt;/div&gt; &lt;p&gt;The custom environment variables, which in this example access a PostgreSQL database, are defined under &lt;code&gt;customEnvVar&lt;/code&gt; and provide custom binding information for the application to bind with its needed backing services.&lt;/p&gt; &lt;h2&gt;The Service Binding Operator in action&lt;/h2&gt; &lt;p&gt;The best way to appreciate the features provided by the Service Binding Operator is to see them in action in a typical usage scenario. A set of example scenarios and operators that manage backing services is being developed in parallel with Service Binding Operator. (Links to these scenarios and backing operators are included in the final section of this article.)&lt;/p&gt; &lt;p&gt;Let&amp;#8217;s use one of these scenarios and operators as an example. For the backing service, we will use a PostgreSQL database managed by &lt;a href="https://github.com/operator-backing-service-samples/postgresql-operator" target="_blank" rel="noopener noreferrer"&gt;this sample operator&lt;/a&gt;. For the application being bound to this backing service, we’ll use &lt;a href="https://github.com/redhat-developer/service-binding-operator/tree/master/examples/nodejs_postgresql" target="_blank" rel="noopener noreferrer"&gt;this Java, Spring Boot example application&lt;/a&gt; that implements a fruit inventory system.&lt;/p&gt; &lt;p&gt;The documentation included with this and other example applications includes the full set of instructions, including admin tasks such as installing the Service Binding Operator and the backing service. In this illustration, we will focus on the steps taken by an application developer and the actions performed by the Service Binding Operator.&lt;/p&gt; &lt;p&gt;Before we begin, we have to install the Service Binding Operator. The operator is available through the OperatorHub in the &lt;a href="http://developers.redhat.com/openshift/"&gt;Red Hat OpenShift&lt;/a&gt; console&amp;#8217;s console&amp;#8217;s Administrative perspective as shown in Figure 1:&lt;/p&gt; &lt;div id="attachment_669977" style="width: 663px" class="wp-caption aligncenter"&gt;&lt;img aria-describedby="caption-attachment-669977" class="wp-image-669977" src="https://developers.redhat.com/blog/wp-content/uploads/2019/12/Screenshot-from-2019-12-19-15-48-13-300x177.png" alt="" width="653" height="385" srcset="https://developers.redhat.com/blog/wp-content/uploads/2019/12/Screenshot-from-2019-12-19-15-48-13-300x177.png 300w, https://developers.redhat.com/blog/wp-content/uploads/2019/12/Screenshot-from-2019-12-19-15-48-13-768x454.png 768w, https://developers.redhat.com/blog/wp-content/uploads/2019/12/Screenshot-from-2019-12-19-15-48-13-1024x605.png 1024w, https://developers.redhat.com/blog/wp-content/uploads/2019/12/Screenshot-from-2019-12-19-15-48-13.png 1378w" sizes="(max-width: 653px) 100vw, 653px" /&gt;&lt;p id="caption-attachment-669977" class="wp-caption-text"&gt;Figure 2: Installing the Service Binding Operator.&lt;/p&gt;&lt;/div&gt; &lt;p&gt;The sequence of application developer steps and Service Binding Operator actions is as follows.&lt;/p&gt; &lt;h3&gt;Step 1: Import the app&lt;/h3&gt; &lt;p&gt;The application developer logs into the &lt;a href="http://developers.redhat.com/openshift/"&gt;Red Hat OpenShift&lt;/a&gt; console&amp;#8217;s Developer perspective and creates a new app by referencing the application&amp;#8217;s source repo, as shown in Figure 3:&lt;/p&gt; &lt;div id="attachment_659907" style="width: 650px" class="wp-caption aligncenter"&gt;&lt;a href="https://developers.redhat.com/blog/wp-content/uploads/2019/11/img_5ddf56e6e18f9.png"&gt;&lt;img aria-describedby="caption-attachment-659907" class="wp-image-659907 size-large" src="https://developers.redhat.com/blog/wp-content/uploads/2019/11/img_5ddf56e6e18f9-1024x554.png" alt="Creating a new app in the Red Hat OpenShift console's Developer perspective." width="640" height="346" srcset="https://developers.redhat.com/blog/wp-content/uploads/2019/11/img_5ddf56e6e18f9-1024x554.png 1024w, https://developers.redhat.com/blog/wp-content/uploads/2019/11/img_5ddf56e6e18f9-300x162.png 300w, https://developers.redhat.com/blog/wp-content/uploads/2019/11/img_5ddf56e6e18f9-768x416.png 768w, https://developers.redhat.com/blog/wp-content/uploads/2019/11/img_5ddf56e6e18f9.png 1578w" sizes="(max-width: 640px) 100vw, 640px" /&gt;&lt;/a&gt;&lt;p id="caption-attachment-659907" class="wp-caption-text"&gt;Figure 3: Creating a new app in the Red Hat OpenShift console&amp;#8217;s Developer perspective.&lt;/p&gt;&lt;/div&gt; &lt;h3&gt;Step 2: Create the database that the app will use&lt;/h3&gt; &lt;p&gt;The app developer now creates the database that the app will use, as shown in Figure 4. Note that at this point, the app and the backing service for the database are not bound together:&lt;/p&gt; &lt;div id="attachment_659857" style="width: 650px" class="wp-caption aligncenter"&gt;&lt;a href="https://developers.redhat.com/blog/wp-content/uploads/2019/11/img_5ddf55c0196e7.png"&gt;&lt;img aria-describedby="caption-attachment-659857" class="wp-image-659857 size-large" src="https://developers.redhat.com/blog/wp-content/uploads/2019/11/img_5ddf55c0196e7-1024x547.png" alt="Creating the database that the app will use." width="640" height="342" srcset="https://developers.redhat.com/blog/wp-content/uploads/2019/11/img_5ddf55c0196e7-1024x547.png 1024w, https://developers.redhat.com/blog/wp-content/uploads/2019/11/img_5ddf55c0196e7-300x160.png 300w, https://developers.redhat.com/blog/wp-content/uploads/2019/11/img_5ddf55c0196e7-768x411.png 768w, https://developers.redhat.com/blog/wp-content/uploads/2019/11/img_5ddf55c0196e7.png 1590w" sizes="(max-width: 640px) 100vw, 640px" /&gt;&lt;/a&gt;&lt;p id="caption-attachment-659857" class="wp-caption-text"&gt;Figure 4: Creating the database that the app will use.&lt;/p&gt;&lt;/div&gt; &lt;p&gt;OpenShift creates a &lt;code&gt;Deployment&lt;/code&gt; for the app, starts a pod for the app, deploys the app, and provides a route to the app. At this point, the app is running but without its backing service. Our example app is constructed so that it can display its main page, but any attempt to create new entries in the fruit inventory fails and raises an alert due to the lack of a backing service database, as shown in Figure 5:&lt;/p&gt; &lt;div id="attachment_659867" style="width: 650px" class="wp-caption aligncenter"&gt;&lt;a href="https://developers.redhat.com/blog/wp-content/uploads/2019/11/img_5ddf55f1104de.png"&gt;&lt;img aria-describedby="caption-attachment-659867" class="wp-image-659867 size-large" src="https://developers.redhat.com/blog/wp-content/uploads/2019/11/img_5ddf55f1104de-1024x597.png" alt="A failed entry creates an alert." width="640" height="373" srcset="https://developers.redhat.com/blog/wp-content/uploads/2019/11/img_5ddf55f1104de-1024x597.png 1024w, https://developers.redhat.com/blog/wp-content/uploads/2019/11/img_5ddf55f1104de-300x175.png 300w, https://developers.redhat.com/blog/wp-content/uploads/2019/11/img_5ddf55f1104de-768x448.png 768w, https://developers.redhat.com/blog/wp-content/uploads/2019/11/img_5ddf55f1104de.png 1588w" sizes="(max-width: 640px) 100vw, 640px" /&gt;&lt;/a&gt;&lt;p id="caption-attachment-659867" class="wp-caption-text"&gt;Figure 5: A failed entry creates an alert.&lt;/p&gt;&lt;/div&gt; &lt;h3&gt;Step 3: Show intent to bind by creating a &lt;code&gt;ServiceBindingRequest&lt;/code&gt;&lt;/h3&gt; &lt;p&gt;At this point, the application developer signals the intent to bind the application together with a backing service by creating a &lt;code&gt;ServiceBindingRequest&lt;/code&gt;. This &lt;code&gt;ServiceBindingRequest&lt;/code&gt; includes custom environment variables that provide database connection information such as a username, password, and connection URL, plus a reference (&lt;code&gt;ResourceRef&lt;/code&gt;) that refers to the backing database service by name, as shown in Figure 6:&lt;/p&gt; &lt;div id="attachment_659877" style="width: 650px" class="wp-caption aligncenter"&gt;&lt;a href="https://developers.redhat.com/blog/wp-content/uploads/2019/11/img_5ddf561319c7b.png"&gt;&lt;img aria-describedby="caption-attachment-659877" class="wp-image-659877 size-large" src="https://developers.redhat.com/blog/wp-content/uploads/2019/11/img_5ddf561319c7b-1024x602.png" alt="The YAML for this ServiceBindingRequest." width="640" height="376" srcset="https://developers.redhat.com/blog/wp-content/uploads/2019/11/img_5ddf561319c7b-1024x602.png 1024w, https://developers.redhat.com/blog/wp-content/uploads/2019/11/img_5ddf561319c7b-300x176.png 300w, https://developers.redhat.com/blog/wp-content/uploads/2019/11/img_5ddf561319c7b-768x452.png 768w, https://developers.redhat.com/blog/wp-content/uploads/2019/11/img_5ddf561319c7b.png 1588w" sizes="(max-width: 640px) 100vw, 640px" /&gt;&lt;/a&gt;&lt;p id="caption-attachment-659877" class="wp-caption-text"&gt;Figure 6: The YAML for this &lt;code&gt;ServiceBindingRequest&lt;/code&gt;.&lt;/p&gt;&lt;/div&gt; &lt;h3&gt;Step 4: The Service Binding Operator shares binding information with the application&lt;/h3&gt; &lt;p&gt;This information is collected by the Service Binding Operator into an intermediary secret, which is then shared with the application. The binding information corresponds to the application’s labels and backing service connection attributes.&lt;/p&gt; &lt;h3&gt;Step 5: The Service Binding Operator detects changes to the application’s &lt;code&gt;Deployment&lt;/code&gt;&lt;/h3&gt; &lt;p&gt;The Service Binding Operator reconciles these changes. The entity in control of that pod (for example, a &lt;code&gt;Deployment&lt;/code&gt; or &lt;code&gt;DeploymentConfig)&lt;/code&gt; restarts the pod to have the changes take effect, resulting in what you see in Figure 7:&lt;/p&gt; &lt;div id="attachment_659887" style="width: 650px" class="wp-caption aligncenter"&gt;&lt;img aria-describedby="caption-attachment-659887" class="wp-image-659887 size-large" src="https://developers.redhat.com/blog/wp-content/uploads/2019/11/img_5ddf564fbe560-1024x622.png" alt="The pod is now restarted." width="640" height="389" srcset="https://developers.redhat.com/blog/wp-content/uploads/2019/11/img_5ddf564fbe560-1024x622.png 1024w, https://developers.redhat.com/blog/wp-content/uploads/2019/11/img_5ddf564fbe560-300x182.png 300w, https://developers.redhat.com/blog/wp-content/uploads/2019/11/img_5ddf564fbe560-768x466.png 768w, https://developers.redhat.com/blog/wp-content/uploads/2019/11/img_5ddf564fbe560.png 1588w" sizes="(max-width: 640px) 100vw, 640px" /&gt;&lt;p id="caption-attachment-659887" class="wp-caption-text"&gt;Figure 7: The pod is now restarted.&lt;/p&gt;&lt;/div&gt; &lt;p&gt;The application can now access the backing service database, as we see in Figure 8:&lt;/p&gt; &lt;div id="attachment_659897" style="width: 650px" class="wp-caption aligncenter"&gt;&lt;a href="https://developers.redhat.com/blog/wp-content/uploads/2019/11/img_5ddf568762345.png"&gt;&lt;img aria-describedby="caption-attachment-659897" class="wp-image-659897 size-large" src="https://developers.redhat.com/blog/wp-content/uploads/2019/11/img_5ddf568762345-1024x671.png" alt="The application in action." width="640" height="419" srcset="https://developers.redhat.com/blog/wp-content/uploads/2019/11/img_5ddf568762345-1024x671.png 1024w, https://developers.redhat.com/blog/wp-content/uploads/2019/11/img_5ddf568762345-300x197.png 300w, https://developers.redhat.com/blog/wp-content/uploads/2019/11/img_5ddf568762345-768x503.png 768w, https://developers.redhat.com/blog/wp-content/uploads/2019/11/img_5ddf568762345.png 1258w" sizes="(max-width: 640px) 100vw, 640px" /&gt;&lt;/a&gt;&lt;p id="caption-attachment-659897" class="wp-caption-text"&gt;Figure 8: The application in action.&lt;/p&gt;&lt;/div&gt; &lt;h2&gt;What’s next?&lt;/h2&gt; &lt;p&gt;The Service Binding Operator is 100% open source. Download the code, kick the tires, provide feedback and ideas for new features, and contribute code!&lt;/p&gt; &lt;h2&gt;Resources&lt;/h2&gt; &lt;ul&gt; &lt;li&gt;&lt;a href="https://github.com/redhat-developer/service-binding-operator" target="_blank" rel="noopener noreferrer"&gt;The Service Binding Operator GitHub repo&lt;/a&gt;.&lt;/li&gt; &lt;li&gt;&lt;a href="https://github.com/redhat-developer/service-binding-operator/blob/master/README.md#example-scenarios"&gt;A set of examples&lt;/a&gt;, each of which illustrates a usage scenario for the Service Binding Operator, is being developed in parallel with the Operator. Each example includes documentation and can be run either through the OpenShift web console or command-line client.&lt;/li&gt; &lt;li&gt;Sample Backing Service Operators &lt;a href="https://github.com/operator-backing-service-samples" target="_blank" rel="noopener noreferrer"&gt;are available here&lt;/a&gt;.&lt;/li&gt; &lt;/ul&gt; &lt;p&gt;&lt;a class="a2a_button_facebook" href="https://www.addtoany.com/add_to/facebook?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2019%2F12%2F20%2Fservice-binding-operator-the-operator-in-action%2F&amp;#38;linkname=Service%20Binding%20Operator%3A%20The%20Operator%20in%20action" title="Facebook" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_twitter" href="https://www.addtoany.com/add_to/twitter?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2019%2F12%2F20%2Fservice-binding-operator-the-operator-in-action%2F&amp;#38;linkname=Service%20Binding%20Operator%3A%20The%20Operator%20in%20action" title="Twitter" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_linkedin" href="https://www.addtoany.com/add_to/linkedin?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2019%2F12%2F20%2Fservice-binding-operator-the-operator-in-action%2F&amp;#38;linkname=Service%20Binding%20Operator%3A%20The%20Operator%20in%20action" title="LinkedIn" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_email" href="https://www.addtoany.com/add_to/email?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2019%2F12%2F20%2Fservice-binding-operator-the-operator-in-action%2F&amp;#38;linkname=Service%20Binding%20Operator%3A%20The%20Operator%20in%20action" title="Email" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_print" href="https://www.addtoany.com/add_to/print?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2019%2F12%2F20%2Fservice-binding-operator-the-operator-in-action%2F&amp;#38;linkname=Service%20Binding%20Operator%3A%20The%20Operator%20in%20action" title="Print" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_reddit" href="https://www.addtoany.com/add_to/reddit?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2019%2F12%2F20%2Fservice-binding-operator-the-operator-in-action%2F&amp;#38;linkname=Service%20Binding%20Operator%3A%20The%20Operator%20in%20action" title="Reddit" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_flipboard" href="https://www.addtoany.com/add_to/flipboard?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2019%2F12%2F20%2Fservice-binding-operator-the-operator-in-action%2F&amp;#38;linkname=Service%20Binding%20Operator%3A%20The%20Operator%20in%20action" title="Flipboard" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_dd addtoany_share_save addtoany_share" href="https://www.addtoany.com/share#url=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2019%2F12%2F20%2Fservice-binding-operator-the-operator-in-action%2F&amp;#038;title=Service%20Binding%20Operator%3A%20The%20Operator%20in%20action" data-a2a-url="https://developers.redhat.com/blog/2019/12/20/service-binding-operator-the-operator-in-action/" data-a2a-title="Service Binding Operator: The Operator in action"&gt;&lt;img src="https://static.addtoany.com/buttons/favicon.png" alt="Share"&gt;&lt;/a&gt;&lt;/p&gt;&lt;p&gt;The post &lt;a rel="nofollow" href="https://developers.redhat.com/blog/2019/12/20/service-binding-operator-the-operator-in-action/"&gt;Service Binding Operator: The Operator in action&lt;/a&gt; appeared first on &lt;a rel="nofollow" href="https://developers.redhat.com/blog"&gt;Red Hat Developer&lt;/a&gt;.&lt;/p&gt;&lt;img src="http://feeds.feedburner.com/~r/jbossbuzz/~4/cJuAXXCdz_c" height="1" width="1" alt=""/&gt;</content><summary>In the previous article, we introduced the Service Binding Operator and explained how it functions. In this article, we’ll look at a more advanced topic—custom environment variables—and walk through a typical usage scenario. Custom environment variables To make binding applications (e.g., legacy Java applications that depend on JDBS strings)  together with backing services more flexible, the Servi...</summary><dc:creator>Shoubhik Bose</dc:creator><dc:date>2019-12-20T08:00:09Z</dc:date><feedburner:origLink>https://developers.redhat.com/blog/2019/12/20/service-binding-operator-the-operator-in-action/</feedburner:origLink></entry><entry><title>Red Hat Summit 2020 - An Advanced Agile Integration Blueprint</title><link rel="alternate" href="http://feedproxy.google.com/~r/jbossbuzz/~3/3OJm_GnPghE/red-hat-summit-2020-advanced-agile-integration-blueprint.html" /><category term="AppDev" scheme="searchisko:content:tags" /><category term="Automate" scheme="searchisko:content:tags" /><category term="cloud" scheme="searchisko:content:tags" /><category term="conference" scheme="searchisko:content:tags" /><category term="Containers" scheme="searchisko:content:tags" /><category term="feed_group_name_global" scheme="searchisko:content:tags" /><category term="feed_name_ericschabell" scheme="searchisko:content:tags" /><category term="FUSE" scheme="searchisko:content:tags" /><category term="JBoss" scheme="searchisko:content:tags" /><category term="openshift" scheme="searchisko:content:tags" /><category term="Process Automation Manager" scheme="searchisko:content:tags" /><author><name>Eric D. Schabell</name></author><id>searchisko:content:id:jbossorg_blog-red_hat_summit_2020_an_advanced_agile_integration_blueprint</id><updated>2019-12-20T06:00:06Z</updated><published>2019-12-20T06:00:00Z</published><content type="html">&lt;div dir="ltr" style="text-align: left;" trbidi="on"&gt;&lt;div class="separator" style="clear: both; text-align: center;"&gt;&lt;a href="https://reg.summit.redhat.com/" style="clear: left; float: left; margin-bottom: 1em; margin-right: 1em;" target="_blank"&gt;&lt;img border="0" data-original-height="625" data-original-width="1585" height="126" src="https://1.bp.blogspot.com/-XWdQUP29nkc/XcRFU57TXTI/AAAAAAAAwsk/EvBuCEj5XaAvkB2pkuabl2u9BYxyB86XQCNcBGAsYHQ/s320/Screenshot%2B2019-11-07%2Bat%2B16.38.47.png" width="320" /&gt;&lt;/a&gt;&lt;/div&gt;Back in &lt;a href="http://www.schabell.org/2019/11/red-hat-summit-2020-submissions.html" target="_blank"&gt;early November I shared&lt;/a&gt; a pile of submissions to &lt;a href="https://reg.summit.redhat.com/" target="_blank"&gt;Red Hat Summit 2020 in San Francisco on Apr 27-29&lt;/a&gt;.&lt;br /&gt;&lt;br /&gt;Since that time I've again, for the 4th year in a row, been leading the team that select and delivers your hands-on labs experience at Red Hat Summit.&lt;br /&gt;&lt;br /&gt;As of last week we've finalized the hands-on labs and started sending acceptance emails (rejects follow later), along with the first round of acceptances for other sessions. Anyone who looks closely at my submissions to Red Hat Summit each year should notice I'm no longer putting any hands-on labs in the call for papers. Being on the selection team I've felt that's not right to participate in that type of session, so I've focused on other session types.&lt;br /&gt;&lt;br /&gt;With this round of notifications, I've gotten one session accepted. Let's see what you can join me for in San Francisco, shall we?&lt;br /&gt;&lt;a name='more'&gt;&lt;/a&gt;&lt;br /&gt;Note that just because you did not get an acceptance email for your submissions this time around, it doesn't mean you are not going to be accepted in a later round of notifications. Watch your inbox for more notifications in January 2020.&lt;br /&gt;&lt;br /&gt;So far, this session I will be presenting together with my colleague:&lt;br /&gt;&lt;br /&gt;&lt;h3 style="text-align: left;"&gt;Concept to Reality: An Advanced Agile Integration Blueprint &lt;/h3&gt;&lt;i&gt;Are you all in on the concept of agile integration or just getting your toe in the water? Are you an expert or just getting started with concepts like integration, microservices, message integration, process integration, APIs, and all the things that make your customers experience the best it can be? This session has something for all levels as it walks attendees through the architecture concepts with whiteboard diagrams, easy to grasp images, with a bottom up approach to connecting the dots for the concepts of an integration architecture. Once the groundwork has been laid, the second half of this session take a look at an integration architecture blueprint based on three successful customer integration solutions. Presenting the results of researching these successful solution architectures provides attendees with a clear blueprint for matching to their own architectures, or to help solidify their plans for architecting successful integration solutions. (with &lt;a href="https://twitter.com/Christina_wm" target="_blank"&gt;Christina Lin&lt;/a&gt;)&lt;/i&gt;&lt;br /&gt;&lt;br /&gt;Now enjoy your holidays, close out the year, and cross your fingers for more acceptance letters in January!&lt;i&gt; &lt;/i&gt;&lt;/div&gt;&lt;div class="feedflare"&gt; &lt;a href="http://feeds.feedburner.com/~ff/schabell/jboss?a=IEM7xGJR1bE:_XZ-c_TFwPY:yIl2AUoC8zA"&gt;&lt;img src="http://feeds.feedburner.com/~ff/schabell/jboss?d=yIl2AUoC8zA" border="0"&gt;&lt;/img&gt;&lt;/a&gt; &lt;a href="http://feeds.feedburner.com/~ff/schabell/jboss?a=IEM7xGJR1bE:_XZ-c_TFwPY:63t7Ie-LG7Y"&gt;&lt;img src="http://feeds.feedburner.com/~ff/schabell/jboss?d=63t7Ie-LG7Y" border="0"&gt;&lt;/img&gt;&lt;/a&gt; &lt;a href="http://feeds.feedburner.com/~ff/schabell/jboss?a=IEM7xGJR1bE:_XZ-c_TFwPY:4cEx4HpKnUU"&gt;&lt;img src="http://feeds.feedburner.com/~ff/schabell/jboss?i=IEM7xGJR1bE:_XZ-c_TFwPY:4cEx4HpKnUU" border="0"&gt;&lt;/img&gt;&lt;/a&gt; &lt;a href="http://feeds.feedburner.com/~ff/schabell/jboss?a=IEM7xGJR1bE:_XZ-c_TFwPY:F7zBnMyn0Lo"&gt;&lt;img src="http://feeds.feedburner.com/~ff/schabell/jboss?i=IEM7xGJR1bE:_XZ-c_TFwPY:F7zBnMyn0Lo" border="0"&gt;&lt;/img&gt;&lt;/a&gt; &lt;a href="http://feeds.feedburner.com/~ff/schabell/jboss?a=IEM7xGJR1bE:_XZ-c_TFwPY:V_sGLiPBpWU"&gt;&lt;img src="http://feeds.feedburner.com/~ff/schabell/jboss?i=IEM7xGJR1bE:_XZ-c_TFwPY:V_sGLiPBpWU" border="0"&gt;&lt;/img&gt;&lt;/a&gt; &lt;a href="http://feeds.feedburner.com/~ff/schabell/jboss?a=IEM7xGJR1bE:_XZ-c_TFwPY:qj6IDK7rITs"&gt;&lt;img src="http://feeds.feedburner.com/~ff/schabell/jboss?d=qj6IDK7rITs" border="0"&gt;&lt;/img&gt;&lt;/a&gt; &lt;a href="http://feeds.feedburner.com/~ff/schabell/jboss?a=IEM7xGJR1bE:_XZ-c_TFwPY:gIN9vFwOqvQ"&gt;&lt;img src="http://feeds.feedburner.com/~ff/schabell/jboss?i=IEM7xGJR1bE:_XZ-c_TFwPY:gIN9vFwOqvQ" border="0"&gt;&lt;/img&gt;&lt;/a&gt; &lt;/div&gt;&lt;img src="http://feeds.feedburner.com/~r/schabell/jboss/~4/IEM7xGJR1bE" height="1" width="1" alt=""/&gt;&lt;img src="http://feeds.feedburner.com/~r/jbossbuzz/~4/3OJm_GnPghE" height="1" width="1" alt=""/&gt;</content><summary>Back in early November I shared a pile of submissions to Red Hat Summit 2020 in San Francisco on Apr 27-29. Since that time I've again, for the 4th year in a row, been leading the team that select and delivers your hands-on labs experience at Red Hat Summit. As of last week we've finalized the hands-on labs and started sending acceptance emails (rejects follow later), along with the first round of...</summary><dc:creator>Eric D. Schabell</dc:creator><dc:date>2019-12-20T06:00:00Z</dc:date><feedburner:origLink>http://feedproxy.google.com/~r/schabell/jboss/~3/IEM7xGJR1bE/red-hat-summit-2020-advanced-agile-integration-blueprint.html</feedburner:origLink></entry><entry><title>Introducing the Service Binding Operator</title><link rel="alternate" href="http://feedproxy.google.com/~r/jbossbuzz/~3/9xxf3s-jmB8/" /><category term="cloud" scheme="searchisko:content:tags" /><category term="feed_group_name_nonmiddleware" scheme="searchisko:content:tags" /><category term="feed_name_redhat_developer_blog" scheme="searchisko:content:tags" /><category term="Java" scheme="searchisko:content:tags" /><category term="Node.js" scheme="searchisko:content:tags" /><category term="openshift" scheme="searchisko:content:tags" /><category term="operator" scheme="searchisko:content:tags" /><category term="Service Binding Operator" scheme="searchisko:content:tags" /><author><name>Shoubhik Bose</name></author><id>searchisko:content:id:jbossorg_blog-introducing_the_service_binding_operator</id><updated>2019-12-19T08:00:12Z</updated><published>2019-12-19T08:00:12Z</published><content type="html">&lt;p&gt;Connecting applications to the services that support them—for example, establishing the exchange of credentials between a &lt;a href="https://developers.redhat.com/developer-tools/java"&gt;Java&lt;/a&gt; application and a database that it requires—is referred to as &lt;em&gt;binding&lt;/em&gt;. The configuration and maintenance of this binding together of applications and backing services can be a tedious and inefficient process. Manually editing YAML files to define binding information is error-prone and can introduce difficult-to-debug failures.&lt;/p&gt; &lt;h2&gt;Introduction to service binding&lt;/h2&gt; &lt;p&gt;The goal of the &lt;a href="https://github.com/redhat-developer/service-binding-operator"&gt;Service Binding Operator&lt;/a&gt; is to solve this binding problem. By making it easier for application developers to bind applications with needed backing services, the Service Binding Operator also assists operator providers in promoting and expanding the adoption of their operators. This article introduces the Service Binding Operator and describes how it functions. In the next article, we&amp;#8217;ll demonstrate its use through a real-world example.&lt;/p&gt; &lt;h3&gt;The case for managed binding&lt;/h3&gt; &lt;p&gt;The Service Binding Operator enables applications to use external services by automatically collecting and sharing binding information (credentials, connection details, volume mounts, secrets, etc.) with the application. In effect, the Service Binding Operator defines a contract between a &amp;#8220;bindable&amp;#8221; backing service (for example, a database operator) and an application requiring that backing service.&lt;/p&gt; &lt;p&gt;Note that in addition to the initial sharing of binding information, the binding is also &amp;#8220;managed&amp;#8221; by the Service Binding Operator. This statement means that, if credentials or URLs undergo modification by the backing service operator, those changes are automatically reflected in the application.&lt;/p&gt; &lt;p&gt;There are two parts to this contract. The first part concerns making the backing service bindable and the second part concerns binding the application and the service together. Both parts are supported by a new custom resource, the &lt;code&gt;ServiceBindingRequest&lt;/code&gt;.&lt;/p&gt; &lt;h3&gt;The &lt;code&gt;ServiceBindingRequest&lt;/code&gt; custom resource&lt;/h3&gt; &lt;p&gt;The Service Binding Operator enables application developers to more easily bind applications together with operator-managed backing services (such as a database) without having to perform manual configuration of secrets, ConfigMaps, etc. The Service Binding Operator accomplishes this task by automatically collecting binding information and sharing it with an application and an operator-managed backing service. This binding is performed through a new custom resource called a &lt;code&gt;ServiceBindingRequest&lt;/code&gt;.&lt;/p&gt; &lt;blockquote&gt; &lt;pre&gt;&lt;span class="pl-s"&gt;apiVersion: apps.openshift.io/v1alpha1&lt;/span&gt; &lt;span class="pl-s"&gt;kind: ServiceBindingRequest&lt;/span&gt; &lt;span class="pl-s"&gt;metadata:&lt;/span&gt; &lt;span class="pl-s"&gt; name: binding-request&lt;/span&gt; &lt;span class="pl-s"&gt; namespace: service-binding-demo&lt;/span&gt; &lt;span class="pl-s"&gt;spec:&lt;/span&gt; &lt;span class="pl-s"&gt; applicationSelector:&lt;/span&gt; &lt;span class="pl-s"&gt; resourceRef: nodejs-rest-http-crud&lt;/span&gt; &lt;span class="pl-s"&gt; group: apps&lt;/span&gt; &lt;span class="pl-s"&gt; version: v1&lt;/span&gt; &lt;span class="pl-s"&gt; resource: deployments&lt;/span&gt; &lt;span class="pl-s"&gt; backingServiceSelector:&lt;/span&gt; &lt;span class="pl-s"&gt; group: postgresql.baiju.dev&lt;/span&gt; &lt;span class="pl-s"&gt; version: v1alpha1&lt;/span&gt; &lt;span class="pl-s"&gt; kind: Database&lt;/span&gt; &lt;span class="pl-s"&gt; resourceRef: db-demo&lt;/span&gt;&lt;/pre&gt; &lt;/blockquote&gt; &lt;div id="attachment_663847" style="width: 610px" class="wp-caption aligncenter"&gt;&lt;img aria-describedby="caption-attachment-663847" class="wp-image-663847" src="https://developers.redhat.com/blog/wp-content/uploads/2019/12/ServiceBindingRequest.png" alt="ServiceBindingRequest" width="600" height="267" srcset="https://developers.redhat.com/blog/wp-content/uploads/2019/12/ServiceBindingRequest.png 783w, https://developers.redhat.com/blog/wp-content/uploads/2019/12/ServiceBindingRequest-300x134.png 300w, https://developers.redhat.com/blog/wp-content/uploads/2019/12/ServiceBindingRequest-768x342.png 768w" sizes="(max-width: 600px) 100vw, 600px" /&gt;&lt;p id="caption-attachment-663847" class="wp-caption-text"&gt;Figure 1: The selectors in a &lt;code&gt;ServiceBindingRequest&lt;/code&gt;.&lt;/p&gt;&lt;/div&gt; &lt;p&gt;A &lt;code&gt;ServiceBindingRequest&lt;/code&gt; includes the following two selectors. The first is the &lt;code&gt;applicationSelector&lt;/code&gt;, which identifies the application to be bound with the backing service. The &lt;code&gt;ResourceRef&lt;/code&gt; defined here marks an application for binding. The second is the &lt;code&gt;backingServiceSelector&lt;/code&gt;, which identifies the backing service with which applications will be bound, as shown in Figure 1:&lt;/p&gt; &lt;p&gt;Additional data in the &lt;code&gt;ServiceBindingRequest&lt;/code&gt; can contain a combination of sensitive information such as usernames and passwords, plus non-sensitive information such as port numbers. In order to configure an existing operator to be bindable, an operator provider has to add a &lt;code&gt;ServiceBindingRequest&lt;/code&gt; descriptor to the operator’s manifest. The &lt;code&gt;statusDescriptors&lt;/code&gt; in that manifest will contain the information needed by the Service Binding Operator to bind the application together with the backing service operator.&lt;/p&gt; &lt;p&gt;&lt;strong&gt;Note:&lt;/strong&gt; Sample backing service operators that are already bindable are &lt;a href="https://github.com/operator-backing-service-samples" target="_blank" rel="noopener noreferrer"&gt;available here&lt;/a&gt;.&lt;/p&gt; &lt;p&gt;Figure 2 illustrates the relationship between the &lt;code&gt;ServiceBindingRequest&lt;/code&gt;, its selectors, the application being bound, and the backing service. Note that for the &lt;code&gt;applicationSelector&lt;/code&gt;, the relevant attributes are the application’s group, version, resource, and &lt;code&gt;resourceRef&lt;/code&gt;, and that for the &lt;code&gt;backingServiceSelector&lt;/code&gt;, the relevant attributes are the version, kind, and &lt;code&gt;resourceRef&lt;/code&gt;:&lt;/p&gt; &lt;div id="attachment_659797" style="width: 650px" class="wp-caption aligncenter"&gt;&lt;a href="https://developers.redhat.com/blog/wp-content/uploads/2019/11/img_5ddf544c61c13.png"&gt;&lt;img aria-describedby="caption-attachment-659797" class="wp-image-659797 size-large" src="https://developers.redhat.com/blog/wp-content/uploads/2019/11/img_5ddf544c61c13-1024x770.png" alt="The relationship between the ServiceBindingRequest and related components." width="640" height="481" srcset="https://developers.redhat.com/blog/wp-content/uploads/2019/11/img_5ddf544c61c13-1024x770.png 1024w, https://developers.redhat.com/blog/wp-content/uploads/2019/11/img_5ddf544c61c13-300x225.png 300w, https://developers.redhat.com/blog/wp-content/uploads/2019/11/img_5ddf544c61c13-768x577.png 768w, https://developers.redhat.com/blog/wp-content/uploads/2019/11/img_5ddf544c61c13.png 1594w" sizes="(max-width: 640px) 100vw, 640px" /&gt;&lt;/a&gt;&lt;p id="caption-attachment-659797" class="wp-caption-text"&gt;Figure 2: The relationship between the ServiceBindingRequest and related components.&lt;/p&gt;&lt;/div&gt; &lt;h3&gt;Making an operator-managed backing service bindable&lt;/h3&gt; &lt;p&gt;To make a service bindable, the operator provider needs to express the information needed by applications to bind with the services provided by the operator. In other words, the operator provider must express the information that is &lt;em&gt;interesting&lt;/em&gt; to applications.&lt;/p&gt; &lt;p&gt;The binding information is provided as annotations in the Custom Resource Definition (CRD) of the operator that manages the backing service. The Service Binding Operator extracts the annotations to bind the application together with the backing service.&lt;/p&gt; &lt;p&gt;For example, Figure 3 shows a &lt;em&gt;bind-able&lt;/em&gt; operator&amp;#8217;s annotations in its CRD for a PostgreSQL database backing operator. Note the highlighted text and that &lt;code&gt;status.dbConfigMap&lt;/code&gt; is a &lt;code&gt;ConfigMap&lt;/code&gt; where the username and password are &lt;em&gt;interesting&lt;/em&gt; for binding:&lt;/p&gt; &lt;div id="attachment_659807" style="width: 650px" class="wp-caption aligncenter"&gt;&lt;a href="https://developers.redhat.com/blog/wp-content/uploads/2019/11/img_5ddf5491e2deb.png"&gt;&lt;img aria-describedby="caption-attachment-659807" class="wp-image-659807 size-large" src="https://developers.redhat.com/blog/wp-content/uploads/2019/11/img_5ddf5491e2deb-1024x382.png" alt="A bindable operator's CRD annotations." width="640" height="239" srcset="https://developers.redhat.com/blog/wp-content/uploads/2019/11/img_5ddf5491e2deb-1024x382.png 1024w, https://developers.redhat.com/blog/wp-content/uploads/2019/11/img_5ddf5491e2deb-300x112.png 300w, https://developers.redhat.com/blog/wp-content/uploads/2019/11/img_5ddf5491e2deb-768x287.png 768w, https://developers.redhat.com/blog/wp-content/uploads/2019/11/img_5ddf5491e2deb.png 1592w" sizes="(max-width: 640px) 100vw, 640px" /&gt;&lt;/a&gt;&lt;p id="caption-attachment-659807" class="wp-caption-text"&gt;Figure 3: A bindable operator&amp;#8217;s CRD annotations.&lt;/p&gt;&lt;/div&gt; &lt;p&gt;An alternate method for making a service bindable enables operators that manage backing services, but which do not have any metadata in their CSV to use the Service Binding Operator to bind together the service and applications. The Service Binding Operator binds all sub-resources defined in the backing service CR by populating the binding secret with information from the routes, services, &lt;code&gt;ConfigMaps&lt;/code&gt;, and secrets owned by the backing service CR.&lt;/p&gt; &lt;p&gt;&lt;strong&gt;Note:&lt;/strong&gt; &lt;a href="https://kubernetes.io/docs/concepts/workloads/controllers/garbage-collection/#owners-and-dependents" target="_blank" rel="noopener noreferrer"&gt;This is how resource and sub-resource relationships are set&lt;/a&gt; in Kubernetes.&lt;/p&gt; &lt;p&gt;The binding itself is initiated by the introduction of the API option in the backing service CR (as shown in Figure 4):&lt;/p&gt; &lt;div id="attachment_659817" style="width: 650px" class="wp-caption aligncenter"&gt;&lt;a href="https://developers.redhat.com/blog/wp-content/uploads/2019/11/img_5ddf54e187f02.png"&gt;&lt;img aria-describedby="caption-attachment-659817" class="wp-image-659817 size-large" src="https://developers.redhat.com/blog/wp-content/uploads/2019/11/img_5ddf54e187f02-1024x63.png" alt="Binding initiation." width="640" height="39" srcset="https://developers.redhat.com/blog/wp-content/uploads/2019/11/img_5ddf54e187f02-1024x63.png 1024w, https://developers.redhat.com/blog/wp-content/uploads/2019/11/img_5ddf54e187f02-300x18.png 300w, https://developers.redhat.com/blog/wp-content/uploads/2019/11/img_5ddf54e187f02-768x47.png 768w, https://developers.redhat.com/blog/wp-content/uploads/2019/11/img_5ddf54e187f02.png 1596w" sizes="(max-width: 640px) 100vw, 640px" /&gt;&lt;/a&gt;&lt;p id="caption-attachment-659817" class="wp-caption-text"&gt;Figure 4: Binding initiation.&lt;/p&gt;&lt;/div&gt; &lt;p&gt;When this API option is set to &lt;code&gt;true&lt;/code&gt;, the Service Binding Operator automatically detects the routes, services, &lt;code&gt;ConfigMaps&lt;/code&gt;, and secrets owned by the backing service CR.&lt;/p&gt; &lt;h3&gt;Binding an application together with a backing service&lt;/h3&gt; &lt;p&gt;Manually binding an application together with a backing service without the Service Binding Operator is a time-consuming and error-prone process. The steps needed to perform the binding include:&lt;/p&gt; &lt;ol&gt; &lt;li&gt;Locating the binding information in the backing service’s resources.&lt;/li&gt; &lt;li&gt;Creating and referencing any necessary secrets.&lt;/li&gt; &lt;li&gt;Manually editing the application’s &lt;code&gt;DeploymentConfig&lt;/code&gt;, &lt;code&gt;Deployment&lt;/code&gt;, &lt;code&gt;Replicaset&lt;/code&gt;, &lt;code&gt;KnativeService&lt;/code&gt;, or anything else that uses a standard &lt;code&gt;PodSpec&lt;/code&gt; to reference the binding request.&lt;/li&gt; &lt;/ol&gt; &lt;p&gt;In contrast, by using the Service Binding Operator, the only action that an application developer must make during the import of the application is to make clear the &lt;em&gt;intent&lt;/em&gt; that the binding must be performed. This task is accomplished by creating the &lt;code&gt;ServiceBindingRequest&lt;/code&gt;. The Service Binding Operator takes that intent and performs the binding on behalf of the application developer.&lt;/p&gt; &lt;p&gt;In summary, there are two steps that an application developer must perform. First, they must signal the intent to bind the application to the backing service by adding labels to the application. Second, they must create a new &lt;code&gt;ServiceBindingRequest&lt;/code&gt; that references the backing service.&lt;/p&gt; &lt;p&gt;When the &lt;code&gt;ServiceBindingRequest&lt;/code&gt; is created, the Service Binding Operator&amp;#8217;s controller collects the binding information into an intermediary secret, which it shares with the application through environment variables.&lt;/p&gt; &lt;p&gt;Note that an optional approach that can be used to provide binding information is through custom environment variables. We&amp;#8217;ll provide more on this topic, along with a real-world example, in the next article.&lt;/p&gt; &lt;h2&gt;Resources&lt;/h2&gt; &lt;ul&gt; &lt;li&gt;&lt;a href="https://github.com/redhat-developer/service-binding-operator" target="_blank" rel="noopener noreferrer"&gt;The Service Binding Operator GitHub repo&lt;/a&gt;.&lt;/li&gt; &lt;li&gt;&lt;a href="https://github.com/redhat-developer/service-binding-operator/blob/master/README.md#example-scenarios"&gt;A set of examples&lt;/a&gt;, each of which illustrates a usage scenario for the Service Binding Operator, is being developed in parallel with the Operator. Each example includes documentation and can be run either through the OpenShift web console or command-line client.&lt;/li&gt; &lt;li&gt;Sample Backing Service Operators &lt;a href="https://github.com/operator-backing-service-samples" target="_blank" rel="noopener noreferrer"&gt;are available here&lt;/a&gt;.&lt;/li&gt; &lt;/ul&gt; &lt;p&gt;&lt;a class="a2a_button_facebook" href="https://www.addtoany.com/add_to/facebook?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2019%2F12%2F19%2Fintroducing-the-service-binding-operator%2F&amp;#38;linkname=Introducing%20the%20Service%20Binding%20Operator" title="Facebook" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_twitter" href="https://www.addtoany.com/add_to/twitter?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2019%2F12%2F19%2Fintroducing-the-service-binding-operator%2F&amp;#38;linkname=Introducing%20the%20Service%20Binding%20Operator" title="Twitter" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_linkedin" href="https://www.addtoany.com/add_to/linkedin?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2019%2F12%2F19%2Fintroducing-the-service-binding-operator%2F&amp;#38;linkname=Introducing%20the%20Service%20Binding%20Operator" title="LinkedIn" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_email" href="https://www.addtoany.com/add_to/email?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2019%2F12%2F19%2Fintroducing-the-service-binding-operator%2F&amp;#38;linkname=Introducing%20the%20Service%20Binding%20Operator" title="Email" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_print" href="https://www.addtoany.com/add_to/print?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2019%2F12%2F19%2Fintroducing-the-service-binding-operator%2F&amp;#38;linkname=Introducing%20the%20Service%20Binding%20Operator" title="Print" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_reddit" href="https://www.addtoany.com/add_to/reddit?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2019%2F12%2F19%2Fintroducing-the-service-binding-operator%2F&amp;#38;linkname=Introducing%20the%20Service%20Binding%20Operator" title="Reddit" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_flipboard" href="https://www.addtoany.com/add_to/flipboard?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2019%2F12%2F19%2Fintroducing-the-service-binding-operator%2F&amp;#38;linkname=Introducing%20the%20Service%20Binding%20Operator" title="Flipboard" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_dd addtoany_share_save addtoany_share" href="https://www.addtoany.com/share#url=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2019%2F12%2F19%2Fintroducing-the-service-binding-operator%2F&amp;#038;title=Introducing%20the%20Service%20Binding%20Operator" data-a2a-url="https://developers.redhat.com/blog/2019/12/19/introducing-the-service-binding-operator/" data-a2a-title="Introducing the Service Binding Operator"&gt;&lt;img src="https://static.addtoany.com/buttons/favicon.png" alt="Share"&gt;&lt;/a&gt;&lt;/p&gt;&lt;p&gt;The post &lt;a rel="nofollow" href="https://developers.redhat.com/blog/2019/12/19/introducing-the-service-binding-operator/"&gt;Introducing the Service Binding Operator&lt;/a&gt; appeared first on &lt;a rel="nofollow" href="https://developers.redhat.com/blog"&gt;Red Hat Developer&lt;/a&gt;.&lt;/p&gt;&lt;img src="http://feeds.feedburner.com/~r/jbossbuzz/~4/9xxf3s-jmB8" height="1" width="1" alt=""/&gt;</content><summary>Connecting applications to the services that support them—for example, establishing the exchange of credentials between a Java application and a database that it requires—is referred to as binding. The configuration and maintenance of this binding together of applications and backing services can be a tedious and inefficient process. Manually editing YAML files to define binding information is err...</summary><dc:creator>Shoubhik Bose</dc:creator><dc:date>2019-12-19T08:00:12Z</dc:date><feedburner:origLink>https://developers.redhat.com/blog/2019/12/19/introducing-the-service-binding-operator/</feedburner:origLink></entry><entry><title>Move your APIs into the serverless era with Camel K and Knative</title><link rel="alternate" href="http://feedproxy.google.com/~r/jbossbuzz/~3/4H4imgoWMFQ/" /><category term="feed_group_name_nonmiddleware" scheme="searchisko:content:tags" /><category term="feed_name_redhat_developer_blog" scheme="searchisko:content:tags" /><category term="Knative" scheme="searchisko:content:tags" /><category term="Kubernetes" scheme="searchisko:content:tags" /><category term="microservices" scheme="searchisko:content:tags" /><category term="Red Hat OpenShift Container Platform" scheme="searchisko:content:tags" /><category term="serverless" scheme="searchisko:content:tags" /><category term="service mesh" scheme="searchisko:content:tags" /><author><name>Abdellatif BOUCHAMA</name></author><id>searchisko:content:id:jbossorg_blog-move_your_apis_into_the_serverless_era_with_camel_k_and_knative</id><updated>2019-12-18T08:00:53Z</updated><published>2019-12-18T08:00:53Z</published><content type="html">&lt;p&gt;In the past few years, developers have addressed the challenge of evolving from monolith systems to &lt;a href="https://developers.redhat.com/topics/microservices/"&gt;microservices architecture&lt;/a&gt;. These days, we hear about the adoption of &lt;a href="https://developers.redhat.com/topics/serverless-architecture/"&gt;&lt;em&gt;serverless&lt;/em&gt;&lt;/a&gt; systems.&lt;/p&gt; &lt;p&gt;Like many trends in software, there’s no one clear view of how to define serverless or how this approach offers added value for our software architecture. The perfect place to start with serverless systems and discover serverless capabilities is through a use case.&lt;span id="more-658557"&gt;&lt;/span&gt;&lt;/p&gt; &lt;p&gt;In this video, we&amp;#8217;ll show how to move your APIs into the serverless era using the super duo of Camel K and &lt;a href="https://developers.redhat.com/topics/serverless-architecture/"&gt;Knative&lt;/a&gt;:&lt;/p&gt; &lt;iframe class='youtube-player' type='text/html' width='640' height='360' src='https://www.youtube.com/embed/lOqubmVSGdw?version=3&amp;#038;rel=1&amp;#038;fs=1&amp;#038;autohide=2&amp;#038;showsearch=0&amp;#038;showinfo=1&amp;#038;iv_load_policy=1&amp;#038;wmode=transparent' allowfullscreen='true' style='border:0;'&gt;&lt;/iframe&gt; &lt;p&gt;By the end of this video, you will be able to:&lt;/p&gt; &lt;ul&gt; &lt;li&gt;Deploy an API with &lt;a href="https://camel.apache.org/camel-k/latest/index.html" target="_blank" rel="noopener noreferrer"&gt;Camel K&lt;/a&gt; as a &lt;a href="https://knative.dev" target="_blank" rel="noopener noreferrer"&gt;Knative&lt;/a&gt; service.&lt;/li&gt; &lt;li&gt;Deploy multiple revisions of a service.&lt;/li&gt; &lt;li&gt;Understand the scale-to-zero feature, and manage an auto-scaling strategy.&lt;/li&gt; &lt;li&gt;Set traffic distribution using different revisions of a service.&lt;/li&gt; &lt;/ul&gt; &lt;p&gt;Enjoy!&lt;/p&gt; &lt;p&gt;&lt;a class="a2a_button_facebook" href="https://www.addtoany.com/add_to/facebook?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2019%2F12%2F18%2Fmove-your-apis-into-the-serverless-era-with-camel-k-and-knative%2F&amp;#38;linkname=Move%20your%20APIs%20into%20the%20serverless%20era%20with%20Camel%20K%20and%20Knative" title="Facebook" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_twitter" href="https://www.addtoany.com/add_to/twitter?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2019%2F12%2F18%2Fmove-your-apis-into-the-serverless-era-with-camel-k-and-knative%2F&amp;#38;linkname=Move%20your%20APIs%20into%20the%20serverless%20era%20with%20Camel%20K%20and%20Knative" title="Twitter" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_linkedin" href="https://www.addtoany.com/add_to/linkedin?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2019%2F12%2F18%2Fmove-your-apis-into-the-serverless-era-with-camel-k-and-knative%2F&amp;#38;linkname=Move%20your%20APIs%20into%20the%20serverless%20era%20with%20Camel%20K%20and%20Knative" title="LinkedIn" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_email" href="https://www.addtoany.com/add_to/email?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2019%2F12%2F18%2Fmove-your-apis-into-the-serverless-era-with-camel-k-and-knative%2F&amp;#38;linkname=Move%20your%20APIs%20into%20the%20serverless%20era%20with%20Camel%20K%20and%20Knative" title="Email" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_print" href="https://www.addtoany.com/add_to/print?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2019%2F12%2F18%2Fmove-your-apis-into-the-serverless-era-with-camel-k-and-knative%2F&amp;#38;linkname=Move%20your%20APIs%20into%20the%20serverless%20era%20with%20Camel%20K%20and%20Knative" title="Print" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_reddit" href="https://www.addtoany.com/add_to/reddit?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2019%2F12%2F18%2Fmove-your-apis-into-the-serverless-era-with-camel-k-and-knative%2F&amp;#38;linkname=Move%20your%20APIs%20into%20the%20serverless%20era%20with%20Camel%20K%20and%20Knative" title="Reddit" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_flipboard" href="https://www.addtoany.com/add_to/flipboard?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2019%2F12%2F18%2Fmove-your-apis-into-the-serverless-era-with-camel-k-and-knative%2F&amp;#38;linkname=Move%20your%20APIs%20into%20the%20serverless%20era%20with%20Camel%20K%20and%20Knative" title="Flipboard" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_dd addtoany_share_save addtoany_share" href="https://www.addtoany.com/share#url=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2019%2F12%2F18%2Fmove-your-apis-into-the-serverless-era-with-camel-k-and-knative%2F&amp;#038;title=Move%20your%20APIs%20into%20the%20serverless%20era%20with%20Camel%20K%20and%20Knative" data-a2a-url="https://developers.redhat.com/blog/2019/12/18/move-your-apis-into-the-serverless-era-with-camel-k-and-knative/" data-a2a-title="Move your APIs into the serverless era with Camel K and Knative"&gt;&lt;img src="https://static.addtoany.com/buttons/favicon.png" alt="Share"&gt;&lt;/a&gt;&lt;/p&gt;&lt;p&gt;The post &lt;a rel="nofollow" href="https://developers.redhat.com/blog/2019/12/18/move-your-apis-into-the-serverless-era-with-camel-k-and-knative/"&gt;Move your APIs into the serverless era with Camel K and Knative&lt;/a&gt; appeared first on &lt;a rel="nofollow" href="https://developers.redhat.com/blog"&gt;Red Hat Developer&lt;/a&gt;.&lt;/p&gt;&lt;img src="http://feeds.feedburner.com/~r/jbossbuzz/~4/4H4imgoWMFQ" height="1" width="1" alt=""/&gt;</content><summary>In the past few years, developers have addressed the challenge of evolving from monolith systems to microservices architecture. These days, we hear about the adoption of serverless systems. Like many trends in software, there’s no one clear view of how to define serverless or how this approach offers added value for our software architecture. The perfect place to start with serverless systems and ...</summary><dc:creator>Abdellatif BOUCHAMA</dc:creator><dc:date>2019-12-18T08:00:53Z</dc:date><feedburner:origLink>https://developers.redhat.com/blog/2019/12/18/move-your-apis-into-the-serverless-era-with-camel-k-and-knative/</feedburner:origLink></entry><entry><title>Set up Red Hat AMQ Streams custom certificates on OpenShift</title><link rel="alternate" href="http://feedproxy.google.com/~r/jbossbuzz/~3/sL6DyU57RiE/" /><category term="feed_group_name_nonmiddleware" scheme="searchisko:content:tags" /><category term="feed_name_redhat_developer_blog" scheme="searchisko:content:tags" /><category term="Red Hat AMQ" scheme="searchisko:content:tags" /><category term="Red Hat OpenShift Container Platform" scheme="searchisko:content:tags" /><category term="security" scheme="searchisko:content:tags" /><category term="TLS" scheme="searchisko:content:tags" /><author><name>Federico Valeri</name></author><id>searchisko:content:id:jbossorg_blog-set_up_red_hat_amq_streams_custom_certificates_on_openshift</id><updated>2019-12-18T08:00:10Z</updated><published>2019-12-18T08:00:10Z</published><content type="html">&lt;p&gt;Secure communication over a computer network is one of the most important requirements for a system, and yet it can be difficult to set up correctly. This example shows how to set up &lt;a href="https://developers.redhat.com/blog/category/stream-processing/" rel="noopener noreferrer"&gt;Red Hat AMQ Streams&lt;/a&gt;&amp;#8216; end-to-end TLS encryption using a custom X.509 CA certificate on the &lt;a href="http://developers.redhat.com/openshift/" target="_blank" rel="noopener noreferrer"&gt;Red Hat OpenShift&lt;/a&gt; platform.&lt;/p&gt; &lt;h2&gt;Prerequisites&lt;/h2&gt; &lt;p&gt;You need to have the following in place before you can proceed with this example:&lt;/p&gt; &lt;ul&gt; &lt;li&gt;An OpenShift cluster up and running with at least four CPUs and 5GB of memory.&lt;/li&gt; &lt;li&gt;A custom X.509 CA certificate in PEM format (along with its chain).&lt;/li&gt; &lt;li&gt;An active &lt;a href="https://access.redhat.com/" target="_blank" rel="noopener noreferrer"&gt;Red Hat Customer Portal&lt;/a&gt; account.&lt;/li&gt; &lt;li&gt;The &lt;a href="https://access.redhat.com/jbossnetwork/restricted/softwareDetail.html?softwareId=74481&amp;#38;product=jboss.amq.streams&amp;#38;version=1.3.0&amp;#38;downloadType=distributions" target="_blank" rel="noopener noreferrer"&gt;Red Hat AMQ Streams 1.3.0 Installation and Example package&lt;/a&gt;.&lt;/li&gt; &lt;li&gt;An OpenShift user with the &lt;code&gt;cluster-admin&lt;/code&gt; role.&lt;/li&gt; &lt;/ul&gt; &lt;p&gt;&lt;span id="more-662667"&gt;&lt;/span&gt;&lt;/p&gt; &lt;h2&gt;The procedure&lt;/h2&gt; &lt;p&gt;Before we start, let&amp;#8217;s define a few handy variables:&lt;/p&gt; &lt;pre&gt;USER="developer" PROJECT="streams" CA_USER="system:admin" RA_SECRET="reg-auth-secret" CLUSTER="my-cluster" &lt;/pre&gt; &lt;h3&gt;Set up a new project&lt;/h3&gt; &lt;p&gt;The first step after this is to log in as &lt;code&gt;cluster-admin&lt;/code&gt; and create a new project to host our clusters. We need this role because we have to install &lt;i&gt;custom resource definitions (CRDs)&lt;/i&gt; that are required by the &lt;i&gt;Cluster Operator (CO)&lt;/i&gt;. We then give full admin rights to the user to let them manage the project once ready:&lt;/p&gt; &lt;pre&gt;$ oc login -u $CA_USER $ oc new-project $PROJECT $ oc adm policy add-role-to-user admin $USER &lt;/pre&gt; &lt;p&gt;To be able to download images from the &lt;i&gt;Red Hat Container Registry&lt;/i&gt;, we also need to add an authentication Secret (use your credentials here):&lt;/p&gt; &lt;pre&gt;$ oc create secret docker-registry $RA_SECRET \ --docker-server=registry.redhat.io \ --docker-username=&amp;#60;portal-username&amp;#62; \ --docker-password=&amp;#60;portal-password&amp;#62; $ oc secrets link default $RA_SECRET --for=pull &lt;/pre&gt; &lt;p&gt;Then, unzip the &lt;i&gt;Installation and Examples&lt;/i&gt; distribution package and replace the default project&amp;#8217;s name with yours:&lt;/p&gt; &lt;pre&gt;TMP="/tmp/$PROJECT" &amp;#38;&amp;#38; rm -rf $TMP &amp;#38;&amp;#38; mkdir -p $TMP $ unzip -qq amq-streams-1.3.0-ocp-install-examples.zip -d $TMP $ sed -i -e "s/namespace: .*/namespace: $PROJECT/g" $TMP/install/cluster-operator/*RoleBinding*.yaml &lt;/pre&gt; &lt;p&gt;Now, we are ready to install all required CRDs and the Strimzi CO:&lt;/p&gt; &lt;pre&gt;$ oc apply -f $TMP/install/cluster-operator $ oc secrets link strimzi-cluster-operator $RA_SECRET --for=pull $ oc set env deploy/strimzi-cluster-operator STRIMZI_IMAGE_PULL_SECRETS=$RA_SECRET $ oc set env deploy/strimzi-cluster-operator STRIMZI_NAMESPACE=$PROJECT $ oc apply -f $TMP/install/cluster-operator/020-RoleBinding-strimzi-cluster-operator.yaml $ oc apply -f $TMP/install/cluster-operator/032-RoleBinding-strimzi-cluster-operator-topic-operator-delegation.yaml $ oc apply -f $TMP/install/cluster-operator/031-RoleBinding-strimzi-cluster-operator-entity-operator-delegation.yaml $ oc apply -f $TMP/install/strimzi-admin $ oc adm policy add-cluster-role-to-user strimzi-admin $USER &lt;/pre&gt; &lt;h3&gt;Configure the custom certificate&lt;/h3&gt; &lt;p&gt;After these commands finish, we can configure our custom X.509 CA certificate. I expect that you already have the following files:&lt;/p&gt; &lt;ul&gt; &lt;li&gt;&lt;b&gt;&lt;code&gt;rootca.pem&lt;/code&gt;&lt;/b&gt;: The root Certificate Authority (CA) in our domain (optional).&lt;/li&gt; &lt;li&gt;&lt;b&gt;&lt;code&gt;intermca.pem&lt;/code&gt;&lt;/b&gt;: An intermediate CA used to sign the certificate in a specific context (optional).&lt;/li&gt; &lt;li&gt;&lt;b&gt;&lt;code&gt;myca.pem&lt;/code&gt;&lt;/b&gt;: Our custom CA certificate to use with Apache Kafka.&lt;/li&gt; &lt;li&gt;&lt;b&gt;&lt;code&gt;myca-prk.pem&lt;/code&gt;&lt;/b&gt;: The private key for our custom CA certificate.&lt;/li&gt; &lt;/ul&gt; &lt;p&gt;All CAs in the chain should be configured as a CA in the X509v3 Basic Constraints. This means that &lt;em&gt;you cannot use a classic non-CA certificate to replace the self-generated certificate&lt;/em&gt; (see also additional notes at the end). The reason for this is that it is used to sign certificates for inter-broker communication.&lt;/p&gt; &lt;p&gt;After printing out your custom certificate you should be able to see this property:&lt;/p&gt; &lt;pre&gt;$ openssl x509 -inform pem -in myca.pem -noout -text ... X509v3 Basic Constraints: CA:TRUE &lt;/pre&gt; &lt;p&gt;When you have a valid CA certificate, create a bundle file like this:&lt;/p&gt; &lt;pre&gt;$ cat myca.pem intermca.pem rootca.pem &amp;#62; bundle.pem &lt;/pre&gt; &lt;p&gt;Then, create all required Secrets and labels containing our custom CA. This must be done before creating our custom cluster (next step):&lt;/p&gt; &lt;pre&gt;$ oc create secret generic $CLUSTER-cluster-ca-cert --from-file=ca.crt=bundle.pem $ oc label secret $CLUSTER-cluster-ca-cert strimzi.io/kind=Kafka strimzi.io/cluster=$CLUSTER $ oc create secret generic $CLUSTER-cluster-ca --from-file=ca.key=myca-prk.pem $ oc label secret $CLUSTER-cluster-ca strimzi.io/kind=Kafka strimzi.io/cluster=$CLUSTER $ oc create secret generic $CLUSTER-clients-ca-cert --from-file=ca.crt=bundle.pem $ oc label secret $CLUSTER-clients-ca-cert strimzi.io/kind=Kafka strimzi.io/cluster=$CLUSTER $ oc create secret generic $CLUSTER-clients-ca --from-file=ca.key=myca-prk.pem $ oc label secret $CLUSTER-clients-ca strimzi.io/kind=Kafka strimzi.io/cluster=$CLUSTER &lt;/pre&gt; &lt;p&gt;Finally, we can deploy our cluster definition. Note how we set &lt;code&gt;generateCertificateAuthority&lt;/code&gt; to instruct the CO not to generate the self-signed CA that otherwise would overwrite our previous configuration.&lt;/p&gt; &lt;h3&gt;Example: Ephemeral cluster creation (not for production)&lt;/h3&gt; &lt;p&gt;Here we create a small ephemeral cluster just for the sake of this example. &lt;em&gt;Do not use the exact same setup for production&lt;/em&gt;:&lt;/p&gt; &lt;pre&gt;$ oc create -f - &amp;#60;&amp;#60;EOF apiVersion: kafka.strimzi.io/v1alpha1 kind: Kafka metadata: name: $CLUSTER spec: kafka: version: "2.3.0" replicas: 1 config: num.partitions: 1 default.replication.factor: 1 log.message.format.version: "2.3" clusterCa: generateCertificateAuthority: false clientsCa: generateCertificateAuthority: false listeners: plain: {} tls: {} external: type: route readinessProbe: initialDelaySeconds: 30 timeoutSeconds: 10 livenessProbe: initialDelaySeconds: 30 timeoutSeconds: 10 template: pod: terminationGracePeriodSeconds: 120 storage: type: ephemeral resources: requests: cpu: "1000m" memory: "2Gi" limits: cpu: "1000m" memory: "2Gi" tlsSidecar: resources: limits: cpu: "100m" memory: "128Mi" requests: cpu: "100m" memory: "128Mi" zookeeper: replicas: 1 readinessProbe: initialDelaySeconds: 15 timeoutSeconds: 5 livenessProbe: initialDelaySeconds: 15 timeoutSeconds: 5 storage: type: ephemeral resources: requests: cpu: "500m" memory: "1Gi" limits: cpu: "500m" memory: "1Gi" tlsSidecar: resources: limits: cpu: "100m" memory: "128Mi" requests: cpu: "100m" memory: "128Mi" entityOperator: topicOperator: resources: limits: cpu: "250m" memory: "256Mi" requests: cpu: "250m" memory: "256Mi" userOperator: resources: limits: cpu: "250m" memory: "256Mi" requests: cpu: "250m" memory: "256Mi" tlsSidecar: resources: limits: cpu: "100m" memory: "128Mi" requests: cpu: "100m" memory: "128Mi" EOF &lt;/pre&gt; &lt;p&gt;Once the cluster is up and running, you might want to check that the custom CA is correctly loaded:&lt;/p&gt; &lt;pre&gt;$ oc get pods $ oc logs strimzi-cluster-operator-&amp;#60;uuid&amp;#62; $ oc logs $CLUSTER-kafka-0 -c kafka &lt;/pre&gt; &lt;h3&gt;Set up the Java client&lt;/h3&gt; &lt;p&gt;Create and use a truststore in Java KeyStore (JKS) format for one-way TLS authentication:&lt;/p&gt; &lt;pre&gt;$ oc extract secret/$CLUSTER-cluster-ca-cert --keys=ca.crt --to=- &amp;#62; ca.pem keytool -import -noprompt -alias root -file ca.pem -keystore truststore.jks -storepass secret &lt;/pre&gt; &lt;p&gt;If you want to access Kafka from outside OpenShift, then you also need to use this bootstrap URL:&lt;/p&gt; &lt;pre&gt;$ echo $(oc get routes $CLUSTER-kafka-bootstrap -o=jsonpath='{.status.ingress[0].host}{"\n"}'):443 &lt;/pre&gt; &lt;h2&gt;Additional notes&lt;/h2&gt; &lt;p&gt;We already know that most security teams won&amp;#8217;t easily release CA certificates. We are working on an &lt;a href="https://issues.jboss.org/browse/ENTMQST-1371" target="_blank" rel="noopener noreferrer"&gt;enhancement&lt;/a&gt; to provide the option to use a non-CA certificate for Kafka listeners, leaving the internal self-generated CA to secure the inter-broker communication.&lt;/p&gt; &lt;p&gt;Beware that when using a custom CA as explained in this post, you are responsible for the certificate renewals. This process is fully automated when using self-generated certificates. In any case, after the renewal, you will have to recreate the client&amp;#8217;s truststore as described before.&lt;/p&gt; &lt;p&gt;&lt;a class="a2a_button_facebook" href="https://www.addtoany.com/add_to/facebook?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2019%2F12%2F18%2Fset-up-red-hat-amq-streams-custom-certificates-on-openshift%2F&amp;#38;linkname=Set%20up%20Red%20Hat%20AMQ%20Streams%20custom%20certificates%20on%20OpenShift" title="Facebook" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_twitter" href="https://www.addtoany.com/add_to/twitter?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2019%2F12%2F18%2Fset-up-red-hat-amq-streams-custom-certificates-on-openshift%2F&amp;#38;linkname=Set%20up%20Red%20Hat%20AMQ%20Streams%20custom%20certificates%20on%20OpenShift" title="Twitter" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_linkedin" href="https://www.addtoany.com/add_to/linkedin?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2019%2F12%2F18%2Fset-up-red-hat-amq-streams-custom-certificates-on-openshift%2F&amp;#38;linkname=Set%20up%20Red%20Hat%20AMQ%20Streams%20custom%20certificates%20on%20OpenShift" title="LinkedIn" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_email" href="https://www.addtoany.com/add_to/email?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2019%2F12%2F18%2Fset-up-red-hat-amq-streams-custom-certificates-on-openshift%2F&amp;#38;linkname=Set%20up%20Red%20Hat%20AMQ%20Streams%20custom%20certificates%20on%20OpenShift" title="Email" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_print" href="https://www.addtoany.com/add_to/print?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2019%2F12%2F18%2Fset-up-red-hat-amq-streams-custom-certificates-on-openshift%2F&amp;#38;linkname=Set%20up%20Red%20Hat%20AMQ%20Streams%20custom%20certificates%20on%20OpenShift" title="Print" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_reddit" href="https://www.addtoany.com/add_to/reddit?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2019%2F12%2F18%2Fset-up-red-hat-amq-streams-custom-certificates-on-openshift%2F&amp;#38;linkname=Set%20up%20Red%20Hat%20AMQ%20Streams%20custom%20certificates%20on%20OpenShift" title="Reddit" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_flipboard" href="https://www.addtoany.com/add_to/flipboard?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2019%2F12%2F18%2Fset-up-red-hat-amq-streams-custom-certificates-on-openshift%2F&amp;#38;linkname=Set%20up%20Red%20Hat%20AMQ%20Streams%20custom%20certificates%20on%20OpenShift" title="Flipboard" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_dd addtoany_share_save addtoany_share" href="https://www.addtoany.com/share#url=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2019%2F12%2F18%2Fset-up-red-hat-amq-streams-custom-certificates-on-openshift%2F&amp;#038;title=Set%20up%20Red%20Hat%20AMQ%20Streams%20custom%20certificates%20on%20OpenShift" data-a2a-url="https://developers.redhat.com/blog/2019/12/18/set-up-red-hat-amq-streams-custom-certificates-on-openshift/" data-a2a-title="Set up Red Hat AMQ Streams custom certificates on OpenShift"&gt;&lt;img src="https://static.addtoany.com/buttons/favicon.png" alt="Share"&gt;&lt;/a&gt;&lt;/p&gt;&lt;p&gt;The post &lt;a rel="nofollow" href="https://developers.redhat.com/blog/2019/12/18/set-up-red-hat-amq-streams-custom-certificates-on-openshift/"&gt;Set up Red Hat AMQ Streams custom certificates on OpenShift&lt;/a&gt; appeared first on &lt;a rel="nofollow" href="https://developers.redhat.com/blog"&gt;Red Hat Developer&lt;/a&gt;.&lt;/p&gt;&lt;img src="http://feeds.feedburner.com/~r/jbossbuzz/~4/sL6DyU57RiE" height="1" width="1" alt=""/&gt;</content><summary>Secure communication over a computer network is one of the most important requirements for a system, and yet it can be difficult to set up correctly. This example shows how to set up Red Hat AMQ Streams‘ end-to-end TLS encryption using a custom X.509 CA certificate on the Red Hat OpenShift platform. Prerequisites You need to have the following in place before you can proceed with this example: An ...</summary><dc:creator>Federico Valeri</dc:creator><dc:date>2019-12-18T08:00:10Z</dc:date><feedburner:origLink>https://developers.redhat.com/blog/2019/12/18/set-up-red-hat-amq-streams-custom-certificates-on-openshift/</feedburner:origLink></entry><entry><title>The blog is moving!</title><link rel="alternate" href="http://feedproxy.google.com/~r/jbossbuzz/~3/k4b9rwQBHqY/the-blog-is-moving" /><category term="feed_group_name_resteasy" scheme="searchisko:content:tags" /><category term="feed_name_resteasy" scheme="searchisko:content:tags" /><author><name>Alessio Soldano</name></author><id>searchisko:content:id:jbossorg_blog-the_blog_is_moving</id><updated>2019-12-17T11:02:04Z</updated><published>2019-12-17T11:01:00Z</published><content type="html">&lt;!-- [DocumentBodyStart:3f114bab-c7d1-4e04-87cd-3fe2a61ae71e] --&gt;&lt;div class="jive-rendered-content"&gt;&lt;p&gt;The RESTEasy project blog is moving to a &lt;a class="jive-link-external-small" href="https://resteasy.github.io/blogs/" rel="nofollow"&gt;new location&lt;/a&gt; and this is going to be the last post here.&lt;/p&gt;&lt;p&gt;As you might have noticed, the website (currently hosted on &lt;a class="jive-link-external-small" href="https://github.com/resteasy/resteasy.github.io" rel="nofollow"&gt;GitHub&lt;/a&gt;) has just been updated to include the blog too.&lt;/p&gt;&lt;p style="min-height: 8pt; padding: 0px;"&gt;&amp;#160;&lt;/p&gt;&lt;p&gt;Please keep on following us at &lt;a class="jive-link-external-small" href="https://resteasy.github.io/blogs/" rel="nofollow"&gt;https://resteasy.github.io/blogs/&lt;/a&gt;&lt;/p&gt;&lt;/div&gt;&lt;!-- [DocumentBodyEnd:3f114bab-c7d1-4e04-87cd-3fe2a61ae71e] --&gt;&lt;img src="http://feeds.feedburner.com/~r/jbossbuzz/~4/k4b9rwQBHqY" height="1" width="1" alt=""/&gt;</content><summary>The RESTEasy project blog is moving to a new location and this is going to be the last post here. As you might have noticed, the website (currently hosted on GitHub) has just been updated to include the blog too.   Please keep on following us at https://resteasy.github.io/blogs/</summary><dc:creator>Alessio Soldano</dc:creator><dc:date>2019-12-17T11:01:00Z</dc:date><feedburner:origLink>https://developer.jboss.org/community/resteasy/blog/2019/12/17/the-blog-is-moving</feedburner:origLink></entry><entry><title>Deploying debuginfod servers for your developers</title><link rel="alternate" href="http://feedproxy.google.com/~r/jbossbuzz/~3/Q0eZjt6pN44/" /><category term="C" scheme="searchisko:content:tags" /><category term="C++" scheme="searchisko:content:tags" /><category term="debugging" scheme="searchisko:content:tags" /><category term="feed_group_name_nonmiddleware" scheme="searchisko:content:tags" /><category term="feed_name_redhat_developer_blog" scheme="searchisko:content:tags" /><category term="observability" scheme="searchisko:content:tags" /><category term="performance" scheme="searchisko:content:tags" /><category term="Red Hat OpenShift Container Platform" scheme="searchisko:content:tags" /><author><name>Frank Eigler</name></author><id>searchisko:content:id:jbossorg_blog-deploying_debuginfod_servers_for_your_developers</id><updated>2019-12-17T08:00:52Z</updated><published>2019-12-17T08:00:52Z</published><content type="html">&lt;p&gt;In an &lt;a href="https://developers.redhat.com/blog/2019/10/14/introducing-debuginfod-the-elfutils-debuginfo-server/"&gt;earlier article&lt;/a&gt;, Aaron Merey introduced the new elfutils &lt;code&gt;debuginfo-server&lt;/code&gt; daemon. With this software now integrated and released into elfutils 0.178 and coming to distros near you, it&amp;#8217;s time to consider why and how to set up such a service for yourself and your team.&lt;/p&gt; &lt;p&gt;Recall that &lt;code&gt;debuginfod&lt;/code&gt; exists to distribute ELF or DWARF debugging information, plus associated source code, for a collection of binaries. If you need to run a debugger like &lt;code&gt;gdb&lt;/code&gt;, a trace or probe tool like &lt;code&gt;perf&lt;/code&gt; or &lt;code&gt;systemtap&lt;/code&gt;, binary analysis tools like &lt;code&gt;binutils&lt;/code&gt; or &lt;code&gt;pahole&lt;/code&gt;, or binary rewriting libraries like &lt;code&gt;dyninst&lt;/code&gt;, you will eventually need &lt;code&gt;debuginfo&lt;/code&gt; that matches your binaries. The &lt;code&gt;debuginfod&lt;/code&gt; client support in these tools enables a fast, transparent way of fetching this data on the fly, without ever having to stop, change to root, run all of the right &lt;code&gt;yum debuginfo-install&lt;/code&gt; commands, and try again. Debuginfo lets you debug anywhere, anytime.&lt;/p&gt; &lt;p&gt;We hope this opening addresses the &amp;#8220;why.&amp;#8221; Now, onto the &amp;#8220;how.&amp;#8221;&lt;span id="more-658327"&gt;&lt;/span&gt;&lt;/p&gt; &lt;h2&gt;Basic server operation&lt;/h2&gt; &lt;p&gt;For clients to be able to download content, you need one or more &lt;code&gt;debuginfod&lt;/code&gt; servers, each with access to all of the potentially needed &lt;code&gt;debuginfo&lt;/code&gt;. Ideally, you should run &lt;code&gt;debuginfod&lt;/code&gt; servers as close as possible to the machines holding a copy of those build artifacts.&lt;/p&gt; &lt;p&gt;If you build your own software, then its build and source trees are in one location. To run a copy of &lt;code&gt;debuginfod&lt;/code&gt; on your build machines:&lt;/p&gt; &lt;pre&gt;$ debuginfod -F /path/to/build/tree1 /path/to/build/tree2 &lt;/pre&gt; &lt;p&gt;Then, &lt;code&gt;debuginfod&lt;/code&gt; will periodically rescan all of these trees and make available all of the executables and debugging data there, plus the source files referenced from there. If you rebuild your code, the index will catch up soon (see the &lt;code&gt;-t&lt;/code&gt; parameter).&lt;/p&gt; &lt;p&gt;If you build your own software all the way into RPMs, then run a copy of &lt;code&gt;debuginfod&lt;/code&gt; with the parent directories containing the RPM files:&lt;/p&gt; &lt;pre&gt;$ debuginfod -R /path/to/rpm/tree1 /path/to/rpm/tree2 &lt;/pre&gt; &lt;p&gt;Then, &lt;code&gt;debuginfod&lt;/code&gt; will periodically rescan all of these trees and make available all of the executables and the debugging files inside the RPMs. This tool matches &lt;code&gt;-debuginfo&lt;/code&gt; and &lt;code&gt;-debugsource&lt;/code&gt; files automatically.&lt;/p&gt; &lt;p&gt;Naturally, you can do both with one &lt;code&gt;debuginfod&lt;/code&gt; process: Just add those arguments together.&lt;/p&gt; &lt;p&gt;If you need to debug software that&amp;#8217;s a part of your Linux distribution, you have a bit of a quandary. Until distributions set up public &lt;code&gt;debuginfod&lt;/code&gt; servers, we have to fend for ourselves. Luckily, doing this is not too difficult. After all, you just need a machine where the distro&amp;#8217;s relevant packages have been installed—or even just downloaded:&lt;/p&gt; &lt;pre&gt;$ mkdir distro-rpms ; cd distro-rpms $ debuginfod -R . &lt;/pre&gt; &lt;p&gt;and repeat as needed:&lt;/p&gt; &lt;pre&gt;$ yumdownloader PACKAGE-N-V-R $ yumdownloader --debuginfo PACKAGE-N-V-R &lt;/pre&gt; &lt;p&gt;with all of the wildcards and retention that your disk will permit.&lt;/p&gt; &lt;p&gt;If you are running a &lt;a href="https://www.redhat.com/en/technologies/management/satellite" rel="noopener noreferrer"&gt;Red Hat Satellite&lt;/a&gt; server in-house, or an informally managed mirror of distro packages, you can run &lt;code&gt;debuginfod&lt;/code&gt; against those systems&amp;#8217; package archives in situ. There&amp;#8217;s no need to install (&lt;code&gt;rpm -i&lt;/code&gt;), filter, or reorganize them in any artificial way. Just let a copy of &lt;code&gt;debuginfod&lt;/code&gt; scan the directories.&lt;/p&gt; &lt;h2&gt;Client configuration&lt;/h2&gt; &lt;p&gt;OK, you now have one or more servers running, and they can be scanning the same or different trees of &lt;code&gt;debuginfo&lt;/code&gt; material. How do we get the clients to talk to them? The simple and obvious solution is to enumerate all of the servers you know of:&lt;/p&gt; &lt;pre&gt;$ export DEBUGINFOD_URLS="http://host1:8002/ http://host2:8002/ ...." $ gdb ... etc. &lt;/pre&gt; &lt;p&gt;For every lookup, the client will send a query to all of the servers at once, and the first one that reports back with the requested information will &amp;#8220;win.&amp;#8221;&lt;/p&gt; &lt;p&gt;While this tactic works, there are a couple of downsides. First, one has to propagate this list of URLs to every client. Second, there is no opportunity to centrally cache content, so each client has to download content separately from the origin server (in HTTP terminology). There is a simple fix: federation.&lt;/p&gt; &lt;p&gt;Each &lt;code&gt;debuginfod&lt;/code&gt; server can also act as a client. If the server can&amp;#8217;t answer a query from its local index and has been configured with a list of upstream &lt;code&gt;$DEBUGINFO_URLS&lt;/code&gt;, then it will forward the request to the upstream servers. It will then cache the result of a positive response and then relay it back. The next request to the same object will be served from the cache (subject to cache retention constraints), instead.&lt;/p&gt; &lt;p&gt;This behavior lets you configure a federated hierarchy of &lt;code&gt;debuginfod&lt;/code&gt; servers. Doing so allows the concentration of configuration files and localizes caching. Each of your per-build-system &lt;code&gt;debuginfods&lt;/code&gt; can then be configured with a list of its higher-level peers. You can even have &lt;code&gt;debuginfod&lt;/code&gt; servers that don&amp;#8217;t scan any local directories at all, but function purely as upstream relays. Make sure the federation is a tree or directed-acylic-graph. Cycles would be bad.&lt;/p&gt; &lt;h2&gt;Server management&lt;/h2&gt; &lt;p&gt;You now have one or more servers running, and clients depending on them. What about keeping them running well? There are a couple of practical issues to worry about.&lt;/p&gt; &lt;p&gt;One is resource usage during and after indexing. Initial &lt;code&gt;debuginfod&lt;/code&gt; indexing is intense on the CPU and storage. It must momentarily stream-decompress RPMs, and parse every ELF or DWARF file. The index database is a tightly formatted SQLite file, but it can grow to around 1% of the size of normal compressed RPMs. If this aspect is not a problem, then don&amp;#8217;t worry about this next paragraph.&lt;/p&gt; &lt;p&gt;If indexing time and space for a very large set of archives is excessive, it can be helpful to run &lt;code&gt;debuginfod&lt;/code&gt; with file filters. Its &lt;code&gt;-I&lt;/code&gt; and &lt;code&gt;-X&lt;/code&gt; options let you specify regular expressions for file names that it should include or exclude. Say that, for example, your archive has multiple and different intermingled architectures or different major distro versions of files, and you only want to track a subset. You can use these options to force &lt;code&gt;debuginfod&lt;/code&gt; to skip files whose names don&amp;#8217;t match the patterns:&lt;/p&gt; &lt;pre&gt;$ debuginfod -I '\.el[78]\.x86_64' -X 'python' -R /path &lt;/pre&gt; &lt;p&gt;If your server has a lot of cores, consider splitting up the scan path into numerous subpaths, because &lt;code&gt;debuginfod&lt;/code&gt; starts one or two threads per path given on the command line. Actual concurrency is carefully managed, so you can be carefree when giving large path lists. So, use:&lt;/p&gt; &lt;pre&gt;$ debuginfod -R /path/*&lt;/pre&gt; &lt;p&gt;instead of&lt;/p&gt; &lt;pre&gt;$ debuginfod -R /path&lt;/pre&gt; &lt;p&gt;If your ELF, DWARF, or RPM archive is very large, you might consider sharding the scanning task between multiple copies of &lt;code&gt;debuginfod,&lt;/code&gt;each running near the storage server. You can use wildcards plus include and exclude paths to give each &lt;code&gt;debuginfod&lt;/code&gt; process only a subset of the data. We discussed above how &lt;code&gt;debuginfod&lt;/code&gt; servers can federate. Use that facility to create a single front-end &lt;code&gt;debuginfod&lt;/code&gt; that scans nothing, but delegates queries to the entire stableful of shards.&lt;/p&gt; &lt;p&gt;Running network servers in a shell by hand is a fine old-school method for playing around. For serious deployments, though, you will want your &lt;code&gt;debuginfod&lt;/code&gt; server to be managed by a supervisory system. Because &lt;code&gt;debuginfod&lt;/code&gt; runs so nicely in a plain shell, it runs just as nicely as a &lt;code&gt;systemd&lt;/code&gt; service or inside a container. A sample &lt;code&gt;systemd&lt;/code&gt; configuration comes with elfutils, and we plan to publish dockerfiles or container images with which you can run debuginfod inside &lt;a href="http://developers.redhat.com/openshift/" rel="noopener"&gt;Red Hat OpenShift&lt;/a&gt;, or another orchestration service.&lt;/p&gt; &lt;p&gt;Once the server is running, it&amp;#8217;s good to monitor it to keep it running. Textual logs go to standard output and error streams, where tools like &lt;code&gt;systemd&lt;/code&gt; journal or OpenShift can collect the text. Add more &lt;code&gt;-v&lt;/code&gt; verbosity options to generate more detailed traces. In addition to this textual data, &lt;code&gt;debuginfod&lt;/code&gt; serves a &lt;code&gt;/metrics&lt;/code&gt; web API URL, which is a Prometheus export-formatted quantitative data source. This URL provides internal statistics about what the server&amp;#8217;s threads are up to. It would not be hard to wire up alerting systems or other programs to detect various types of anomalies.&lt;/p&gt; &lt;p&gt;Security becomes a concern as soon as a &lt;code&gt;debuginfod&lt;/code&gt; service is provided across trust boundaries, such as on the internet and to the public. The man page offers a plethora of caution about the measures required for such a service to be safe for the users as well as the service operator. It&amp;#8217;s not rocket science, but ordinary HTTP frontend protections such as TLS encryption and load control are a must, such as using an HAProxy installation. It is also important to limit &lt;code&gt;debuginfod&lt;/code&gt; indexing to trustworthy (non-hostile) binaries.&lt;/p&gt; &lt;h3&gt;Looking ahead&lt;/h3&gt; &lt;p&gt;What does the future hold? We&amp;#8217;d like to support Debian format packages soon, so our friends in that ecosystem can also take full advantage. We would be delighted to assist Linux distributions in operating public &lt;code&gt;debuginfod&lt;/code&gt; services for their users and are already prototyping this service in &lt;a href="https://koji.fedoraproject.org/koji/" target="_blank" rel="noopener noreferrer"&gt;Fedora koji&lt;/a&gt;. We also envision more manageability features, and perhaps integration with source version control systems. We also welcome suggestions from our early adopters—you!&lt;/p&gt; &lt;p&gt;We hope this article was helpful in motivating you and helping you set up your own &lt;code&gt;debuginfod&lt;/code&gt; services. Please contact us on the &lt;a href="mailto:elfutils-devel@sourceware.org" target="_blank" rel="noopener noreferrer"&gt;elfutils-devel@sourceware.org&lt;/a&gt; mailing list.&lt;/p&gt; &lt;p&gt;&lt;a class="a2a_button_facebook" href="https://www.addtoany.com/add_to/facebook?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2019%2F12%2F17%2Fdeploying-debuginfod-servers-for-your-developers%2F&amp;#38;linkname=Deploying%20debuginfod%20servers%20for%20your%20developers" title="Facebook" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_twitter" href="https://www.addtoany.com/add_to/twitter?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2019%2F12%2F17%2Fdeploying-debuginfod-servers-for-your-developers%2F&amp;#38;linkname=Deploying%20debuginfod%20servers%20for%20your%20developers" title="Twitter" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_linkedin" href="https://www.addtoany.com/add_to/linkedin?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2019%2F12%2F17%2Fdeploying-debuginfod-servers-for-your-developers%2F&amp;#38;linkname=Deploying%20debuginfod%20servers%20for%20your%20developers" title="LinkedIn" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_email" href="https://www.addtoany.com/add_to/email?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2019%2F12%2F17%2Fdeploying-debuginfod-servers-for-your-developers%2F&amp;#38;linkname=Deploying%20debuginfod%20servers%20for%20your%20developers" title="Email" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_print" href="https://www.addtoany.com/add_to/print?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2019%2F12%2F17%2Fdeploying-debuginfod-servers-for-your-developers%2F&amp;#38;linkname=Deploying%20debuginfod%20servers%20for%20your%20developers" title="Print" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_reddit" href="https://www.addtoany.com/add_to/reddit?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2019%2F12%2F17%2Fdeploying-debuginfod-servers-for-your-developers%2F&amp;#38;linkname=Deploying%20debuginfod%20servers%20for%20your%20developers" title="Reddit" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_flipboard" href="https://www.addtoany.com/add_to/flipboard?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2019%2F12%2F17%2Fdeploying-debuginfod-servers-for-your-developers%2F&amp;#38;linkname=Deploying%20debuginfod%20servers%20for%20your%20developers" title="Flipboard" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_dd addtoany_share_save addtoany_share" href="https://www.addtoany.com/share#url=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2019%2F12%2F17%2Fdeploying-debuginfod-servers-for-your-developers%2F&amp;#038;title=Deploying%20debuginfod%20servers%20for%20your%20developers" data-a2a-url="https://developers.redhat.com/blog/2019/12/17/deploying-debuginfod-servers-for-your-developers/" data-a2a-title="Deploying debuginfod servers for your developers"&gt;&lt;img src="https://static.addtoany.com/buttons/favicon.png" alt="Share"&gt;&lt;/a&gt;&lt;/p&gt;&lt;p&gt;The post &lt;a rel="nofollow" href="https://developers.redhat.com/blog/2019/12/17/deploying-debuginfod-servers-for-your-developers/"&gt;Deploying debuginfod servers for your developers&lt;/a&gt; appeared first on &lt;a rel="nofollow" href="https://developers.redhat.com/blog"&gt;Red Hat Developer&lt;/a&gt;.&lt;/p&gt;&lt;img src="http://feeds.feedburner.com/~r/jbossbuzz/~4/Q0eZjt6pN44" height="1" width="1" alt=""/&gt;</content><summary>In an earlier article, Aaron Merey introduced the new elfutils debuginfo-server daemon. With this software now integrated and released into elfutils 0.178 and coming to distros near you, it’s time to consider why and how to set up such a service for yourself and your team. Recall that debuginfod exists to distribute ELF or DWARF debugging information, plus associated source code, for a collection ...</summary><dc:creator>Frank Eigler</dc:creator><dc:date>2019-12-17T08:00:52Z</dc:date><feedburner:origLink>https://developers.redhat.com/blog/2019/12/17/deploying-debuginfod-servers-for-your-developers/</feedburner:origLink></entry><entry><title>Replacing Confluent Schema Registry with Red Hat integration service registry</title><link rel="alternate" href="http://feedproxy.google.com/~r/jbossbuzz/~3/5a-FOUCGh6w/" /><category term="feed_group_name_nonmiddleware" scheme="searchisko:content:tags" /><category term="feed_name_redhat_developer_blog" scheme="searchisko:content:tags" /><category term="integration" scheme="searchisko:content:tags" /><category term="Red Hat Integration" scheme="searchisko:content:tags" /><author><name>Hugo Guerrero</name></author><id>searchisko:content:id:jbossorg_blog-replacing_confluent_schema_registry_with_red_hat_integration_service_registry</id><updated>2019-12-17T08:00:12Z</updated><published>2019-12-17T08:00:12Z</published><content type="html">&lt;p&gt;With the latest release of &lt;a href="https://www.redhat.com/en/products/integration"&gt;Red Hat Integration&lt;/a&gt; now available, we’ve introduced some exciting new capabilities. Along the enhancements for Apache Kafka-based environments, Red Hat &lt;a href="https://developers.redhat.com/blog/2019/11/26/red-hat-simplifies-transition-to-open-source-kafka-with-new-service-registry-and-http-bridge/"&gt;announced&lt;/a&gt; the &lt;a href="https://access.redhat.com/support/offerings/techpreview"&gt;Technical Preview&lt;/a&gt; of the Red Hat Integration service registry to help teams to govern their services schemas. Developers can now use the registry to query for the schemas and artifacts required by each service endpoint or register and store new structures for future use.&lt;br /&gt; &lt;span id="more-662017"&gt;&lt;/span&gt;&lt;/p&gt; &lt;h2&gt;Registry for event-driven architecture&lt;/h2&gt; &lt;p&gt;Red Hat Integration’s service registry, based on the &lt;a href="https://github.com/hguerrero/amq-examples/tree/master/registry-example-avro#apicurio-service-registry-example---avro"&gt;Apicurio project registry&lt;/a&gt;, provides a way to decouple the schema used to serialize and deserialize Kafka messages with the applications that are sending/receiving them. The service registry is a store for schema (and API design) artifacts providing a REST API and a set of optional rules for enforcing content validity and evolution. The registry handles data formats like Apache Avro, JSON Schema, Google Protocol Buffers (protobuf), as well as OpenAPI and AsyncAPI definitions.&lt;/p&gt; &lt;p&gt;To make it easy to transition from Confluent, the service registry added compatibility with the Confluent Schema Registry REST API. This means that applications using Confluent client libraries can replace Schema Registry and use Red Hat Integration service registry instead.&lt;/p&gt; &lt;h2&gt;Replacing Confluent Schema Registry&lt;/h2&gt; &lt;p&gt;&lt;img class="aligncenter size-large wp-image-661417" src="https://developers.redhat.com/blog/wp-content/uploads/2019/12/registry-client-1024x489.png" alt="" width="640" height="306" srcset="https://developers.redhat.com/blog/wp-content/uploads/2019/12/registry-client-1024x489.png 1024w, https://developers.redhat.com/blog/wp-content/uploads/2019/12/registry-client-300x143.png 300w, https://developers.redhat.com/blog/wp-content/uploads/2019/12/registry-client-768x367.png 768w, https://developers.redhat.com/blog/wp-content/uploads/2019/12/registry-client.png 1156w" sizes="(max-width: 640px) 100vw, 640px" /&gt;&lt;br /&gt; For the sake of simplicity in this article, I will use an existing &lt;a href="https://github.com/confluentinc/examples/tree/5.3.1-post/clients/avro"&gt;Avro client example&lt;/a&gt; already available to show you how to switch from Confluent Schema Registry to the Red Hat Integration service registry.&lt;/p&gt; &lt;p&gt;You will need to use &lt;a href="https://docs.docker.com/compose/"&gt;docker-compose&lt;/a&gt; for starting a local environment and Git for cloning the repository code.&lt;/p&gt; &lt;p&gt;1. Clone the example GitHub repository:&lt;/p&gt; &lt;pre&gt;$ git clone &lt;a href="https://github.com/confluentinc/examples.git"&gt;https://github.com/confluentinc/examples.git&lt;/a&gt; $ git checkout 5.3.1-post&lt;/pre&gt; &lt;p&gt;2. Change to the avro example folder:&lt;/p&gt; &lt;pre&gt;$ cd examples/clients/avro/&lt;/pre&gt; &lt;p&gt;3. Open the &lt;code&gt;ConsumerExample.java&lt;/code&gt; file under &lt;code&gt;src/main/java/io/confluent/examples/clients/basicavro&lt;/code&gt;.&lt;br /&gt; 4. Replace the SCHEMA_REGISTRY_URL_CONFIG property with the following:&lt;/p&gt; &lt;pre&gt;... props.put(AbstractKafkaAvroSerDeConfig.SCHEMA_REGISTRY_URL_CONFIG, "&lt;strong&gt;http://localhost:8081/confluent&lt;/strong&gt;"); ...&lt;/pre&gt; &lt;p&gt;5. Repeat the last step with the &lt;code&gt;ProducerExample.java&lt;/code&gt; file.&lt;br /&gt; 6. Download this &lt;a href="https://github.com/hguerrero/amq-examples/tree/master/registry-example-avro#apicurio-service-registry-example---avro" target="_blank" rel="noopener noreferrer"&gt;docker-compose.yaml&lt;/a&gt; file example to deploy a simple Kafka cluster with the Apicurio registry.&lt;br /&gt; 7. Start the Kafka cluster and registry.&lt;/p&gt; &lt;pre&gt;$ docker-compose -f docker-compose.yaml up&lt;/pre&gt; &lt;p&gt;8. To run the producer, compile the project:&lt;/p&gt; &lt;pre&gt;$ mvn clean compile package&lt;/pre&gt; &lt;p&gt;9. Run &lt;code&gt;ProducerExample.java&lt;/code&gt;:&lt;/p&gt; &lt;pre&gt;$ mvn exec:java -Dexec.mainClass=io.confluent.examples.clients.basicavro.ProducerExample&lt;/pre&gt; &lt;p&gt;10. After a few moments you should see the following output:&lt;/p&gt; &lt;pre&gt;... Successfully produced 10 messages to a topic called transactions [INFO] ------------------------------------------------------------------------ [INFO] BUILD SUCCESS [INFO] ------------------------------------------------------------------------ ...&lt;/pre&gt; &lt;p&gt;11. Now run the consumer:&lt;/p&gt; &lt;pre&gt;$ mvn exec:java -Dexec.mainClass=io.confluent.examples.clients.basicavro.ConsumerExample&lt;/pre&gt; &lt;p&gt;The messages should be displayed on your screen:&lt;/p&gt; &lt;pre&gt;... offset = 0, key = id0, value = {"id": "id0", "amount": 1000.0} offset = 1, key = id1, value = {"id": "id1", "amount": 1000.0} offset = 2, key = id2, value = {"id": "id2", "amount": 1000.0} offset = 3, key = id3, value = {"id": "id3", "amount": 1000.0} offset = 4, key = id4, value = {"id": "id4", "amount": 1000.0} offset = 5, key = id5, value = {"id": "id5", "amount": 1000.0} offset = 6, key = id6, value = {"id": "id6", "amount": 1000.0} offset = 7, key = id7, value = {"id": "id7", "amount": 1000.0} offset = 8, key = id8, value = {"id": "id8", "amount": 1000.0} offset = 9, key = id9, value = {"id": "id9", "amount": 1000.0} ...&lt;/pre&gt; &lt;p&gt;12. To check the schema that the producer added to the registry you can issue the following curl command:&lt;/p&gt; &lt;pre&gt;$ curl --silent -X GET http://localhost:8081/confluent/schemas/ids/1 | jq .&lt;/pre&gt; &lt;p&gt;13. The result should show you the Avro schema:&lt;/p&gt; &lt;pre&gt;{  "schema": "{\"type\":\"record\",\"name\":\"Payment\",\"namespace\":\"io.confluent.examples.clients.basicavro\",\"fields\":[{\"name\":\"id\",\"type\":\"string\"},{\"name\":\"amount\",\"type\":\"double\"}]}" }&lt;/pre&gt; &lt;p&gt;Done!&lt;/p&gt; &lt;p&gt;As you can see, you can just change the URL for the registry to use Red Hat service registry instead without the need to change any code in your applications.&lt;/p&gt; &lt;p&gt;If you are interested in other features of the Red Hat Integration service registry, you can see a full-fledged example using Quarkus Kafka extension in my &lt;a href="https://github.com/hguerrero/amq-examples"&gt;amq-examples GitHub repository&lt;/a&gt;.&lt;/p&gt; &lt;h2&gt;Summary&lt;/h2&gt; &lt;p&gt;The Red Hat Integration service registry is a central data store for schemas and API artifacts. Developers can query, create, read, update, and delete service artifacts, versions, and rules to govern the structure of their services. The service registry could be also used as a drop-in replacement for Confluent Schema Registry with Apache Kafka clients. With just a change to the URL for the registry, you can use Red Hat service registry without needing to change code in your applications.&lt;/p&gt; &lt;p&gt;&lt;strong&gt;See also:&lt;/strong&gt;&lt;/p&gt; &lt;ul&gt; &lt;li&gt;&lt;a href="https://developers.redhat.com/blog/2019/11/22/red-hat-advances-debezium-cdc-connectors-for-apache-kafka-support-to-technical-preview/"&gt;Red Hat advances Debezium CDC connectors for Apache Kafka support to Technical Preview&lt;/a&gt;&lt;/li&gt; &lt;li&gt;&lt;a href="https://developers.redhat.com/blog/2019/11/26/red-hat-simplifies-transition-to-open-source-kafka-with-new-service-registry-and-http-bridge/"&gt;Red Hat simplifies transition to open source Kafka with new service registry and HTTP bridge&lt;/a&gt;&lt;/li&gt; &lt;/ul&gt; &lt;p&gt;&lt;a class="a2a_button_facebook" href="https://www.addtoany.com/add_to/facebook?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2019%2F12%2F17%2Freplacing-confluent-schema-registry-with-red-hat-integration-service-registry%2F&amp;#38;linkname=Replacing%20Confluent%20Schema%20Registry%20with%20Red%20Hat%20integration%20service%20registry" title="Facebook" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_twitter" href="https://www.addtoany.com/add_to/twitter?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2019%2F12%2F17%2Freplacing-confluent-schema-registry-with-red-hat-integration-service-registry%2F&amp;#38;linkname=Replacing%20Confluent%20Schema%20Registry%20with%20Red%20Hat%20integration%20service%20registry" title="Twitter" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_linkedin" href="https://www.addtoany.com/add_to/linkedin?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2019%2F12%2F17%2Freplacing-confluent-schema-registry-with-red-hat-integration-service-registry%2F&amp;#38;linkname=Replacing%20Confluent%20Schema%20Registry%20with%20Red%20Hat%20integration%20service%20registry" title="LinkedIn" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_email" href="https://www.addtoany.com/add_to/email?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2019%2F12%2F17%2Freplacing-confluent-schema-registry-with-red-hat-integration-service-registry%2F&amp;#38;linkname=Replacing%20Confluent%20Schema%20Registry%20with%20Red%20Hat%20integration%20service%20registry" title="Email" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_print" href="https://www.addtoany.com/add_to/print?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2019%2F12%2F17%2Freplacing-confluent-schema-registry-with-red-hat-integration-service-registry%2F&amp;#38;linkname=Replacing%20Confluent%20Schema%20Registry%20with%20Red%20Hat%20integration%20service%20registry" title="Print" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_reddit" href="https://www.addtoany.com/add_to/reddit?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2019%2F12%2F17%2Freplacing-confluent-schema-registry-with-red-hat-integration-service-registry%2F&amp;#38;linkname=Replacing%20Confluent%20Schema%20Registry%20with%20Red%20Hat%20integration%20service%20registry" title="Reddit" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_flipboard" href="https://www.addtoany.com/add_to/flipboard?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2019%2F12%2F17%2Freplacing-confluent-schema-registry-with-red-hat-integration-service-registry%2F&amp;#38;linkname=Replacing%20Confluent%20Schema%20Registry%20with%20Red%20Hat%20integration%20service%20registry" title="Flipboard" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_dd addtoany_share_save addtoany_share" href="https://www.addtoany.com/share#url=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2019%2F12%2F17%2Freplacing-confluent-schema-registry-with-red-hat-integration-service-registry%2F&amp;#038;title=Replacing%20Confluent%20Schema%20Registry%20with%20Red%20Hat%20integration%20service%20registry" data-a2a-url="https://developers.redhat.com/blog/2019/12/17/replacing-confluent-schema-registry-with-red-hat-integration-service-registry/" data-a2a-title="Replacing Confluent Schema Registry with Red Hat integration service registry"&gt;&lt;img src="https://static.addtoany.com/buttons/favicon.png" alt="Share"&gt;&lt;/a&gt;&lt;/p&gt;&lt;p&gt;The post &lt;a rel="nofollow" href="https://developers.redhat.com/blog/2019/12/17/replacing-confluent-schema-registry-with-red-hat-integration-service-registry/"&gt;Replacing Confluent Schema Registry with Red Hat integration service registry&lt;/a&gt; appeared first on &lt;a rel="nofollow" href="https://developers.redhat.com/blog"&gt;Red Hat Developer&lt;/a&gt;.&lt;/p&gt;&lt;img src="http://feeds.feedburner.com/~r/jbossbuzz/~4/5a-FOUCGh6w" height="1" width="1" alt=""/&gt;</content><summary>With the latest release of Red Hat Integration now available, we’ve introduced some exciting new capabilities. Along the enhancements for Apache Kafka-based environments, Red Hat announced the Technical Preview of the Red Hat Integration service registry to help teams to govern their services schemas. Developers can now use the registry to query for the schemas and artifacts required by each servi...</summary><dc:creator>Hugo Guerrero</dc:creator><dc:date>2019-12-17T08:00:12Z</dc:date><feedburner:origLink>https://developers.redhat.com/blog/2019/12/17/replacing-confluent-schema-registry-with-red-hat-integration-service-registry/</feedburner:origLink></entry><entry><title>VS Code Language support for Apache Camel 0.0.20 release</title><link rel="alternate" href="http://feedproxy.google.com/~r/jbossbuzz/~3/h5rpEEmvtRo/" /><category term="apache camel" scheme="searchisko:content:tags" /><category term="feed_group_name_nonmiddleware" scheme="searchisko:content:tags" /><category term="feed_name_redhat_developer_blog" scheme="searchisko:content:tags" /><category term="Red Hat Fuse" scheme="searchisko:content:tags" /><category term="Red Hat Integration" scheme="searchisko:content:tags" /><category term="VS Code" scheme="searchisko:content:tags" /><category term="VS Code Extensions" scheme="searchisko:content:tags" /><author><name>Aurélien Pupier</name></author><id>searchisko:content:id:jbossorg_blog-vs_code_language_support_for_apache_camel_0_0_20_release</id><updated>2019-12-16T14:59:48Z</updated><published>2019-12-16T14:59:48Z</published><content type="html">&lt;p&gt;During the past months, several noticeable new features have been added to improve the developer experience of application based on &lt;a href="https://camel.apache.org/"&gt;Apache Camel&lt;/a&gt;. These updates are available in the &lt;a href="https://marketplace.visualstudio.com/items?itemName=redhat.vscode-apache-camel"&gt;0.0.20 release of Visual Studio (VS) Code extension&lt;/a&gt;.&lt;/p&gt; &lt;p&gt;Before going into the list of updates in detail, I want to note that I mentioned in the title the VS Code Extension release because VS Code extension is covering the broader set of new features. Don&amp;#8217;t worry if you are using another IDE, though, most features are also available in all other IDEs that support the Camel Language Server (Eclipse Desktop, Eclipse Che, and more).&lt;/p&gt; &lt;p&gt;&lt;span id="more-666057"&gt;&lt;/span&gt;&lt;/p&gt; &lt;h2&gt;Camel 3 inside&lt;/h2&gt; &lt;p&gt;Camel 3 was &lt;a href="https://camel.apache.org/blog/release-3-0-0.html"&gt;released&lt;/a&gt; a few weeks ago, and the Camel Language Server is already relying on it internally. What does that mean for the end user? It means that the default catalog is now using Camel 3.&lt;/p&gt; &lt;p&gt;If you are still based on Camel 2.x, no problem; check out the following awesome feature.&lt;/p&gt; &lt;h2&gt;Camel catalog version options&lt;/h2&gt; &lt;p&gt;A parameter is now available to choose the Camel catalog version that you want. This can be specified in &lt;em&gt;File -&amp;#62; Preferences -&amp;#62; Settings -&amp;#62; Apache Camel Tooling -&amp;#62; Camel catalog version.&lt;/em&gt;&lt;/p&gt; &lt;p&gt;&lt;img class=" aligncenter size-full wp-image-666097 " data-add-featherlight="https://developers.redhat.com/blog/wp-content/uploads/2019/12/CamelCatalogVersionPreference.gif" src="https://developers.redhat.com/blog/wp-content/uploads/2019/12/CamelCatalogVersionPreference.gif" alt="Camel Catalog Version Preference in VS Code" width="1023" height="595" /&gt;&lt;/p&gt; &lt;h2&gt;Diagnostics with quick fixes and more precise range&lt;/h2&gt; &lt;p&gt;Diagnostics are really useful to pinpoint issues in our code. In previous versions, the diagnostic range error was provided on the full Camel URI. Now, for invalid component parameter keys and invalid component parameter enum values, the range is more precise and is pointing to the exact incriminated key or value.&lt;/p&gt; &lt;p&gt;&lt;img class=" aligncenter size-full wp-image-666147 " data-add-featherlight="https://developers.redhat.com/blog/wp-content/uploads/2019/12/Screenshot-from-2019-12-12-16-39-50-1024x394.png" src="https://developers.redhat.com/blog/wp-content/uploads/2019/12/Screenshot-from-2019-12-12-16-39-50.png" alt="" width="1216" height="468" srcset="https://developers.redhat.com/blog/wp-content/uploads/2019/12/Screenshot-from-2019-12-12-16-39-50.png 1216w, https://developers.redhat.com/blog/wp-content/uploads/2019/12/Screenshot-from-2019-12-12-16-39-50-300x115.png 300w, https://developers.redhat.com/blog/wp-content/uploads/2019/12/Screenshot-from-2019-12-12-16-39-50-768x296.png 768w, https://developers.redhat.com/blog/wp-content/uploads/2019/12/Screenshot-from-2019-12-12-16-39-50-1024x394.png 1024w" sizes="(max-width: 1216px) 100vw, 1216px" /&gt;&lt;/p&gt; &lt;p&gt;For unknown component parameter keys, there is also a quick fix provided if a component parameter key relatively similar exists. It is very useful in case of small typos.&lt;/p&gt; &lt;p&gt;&lt;img class=" aligncenter size-full wp-image-666157 " data-add-featherlight="https://developers.redhat.com/blog/wp-content/uploads/2019/12/filteredListOfQuickfix.gif" src="https://developers.redhat.com/blog/wp-content/uploads/2019/12/filteredListOfQuickfix.gif" alt="" width="989" height="463" /&gt;&lt;/p&gt; &lt;h2&gt;Additional Camel components&lt;/h2&gt; &lt;p&gt;If you are using Camel components that are not part of Camel core catalog, it is now possible to provide the Camel component definition to have it fully supported by the tooling. The Camel component definition is defined as JSON. The JSON file can be found in the jar of the Camel component. The preference can be specified through &lt;em&gt;File -&amp;#62; Preferences -&amp;#62; Settings -&amp;#62; Apache Camel Tooling -&amp;#62; Extra-components -&amp;#62; Edit in settings.json.&lt;/em&gt;&lt;/p&gt; &lt;p&gt;&lt;iframe class='youtube-player' type='text/html' width='640' height='360' src='https://www.youtube.com/embed/U015RzlgFNM?version=3&amp;#038;rel=1&amp;#038;fs=1&amp;#038;autohide=2&amp;#038;showsearch=0&amp;#038;showinfo=1&amp;#038;iv_load_policy=1&amp;#038;wmode=transparent' allowfullscreen='true' style='border:0;'&gt;&lt;/iframe&gt;&lt;/p&gt; &lt;h2&gt;Properties file support&lt;/h2&gt; &lt;p&gt;Camel allows you to configure general component properties using a Properties file (see &lt;a href="https://github.com/apache/camel/blob/master/examples/camel-example-main/src/main/resources/application.properties#L42"&gt;here&lt;/a&gt; for an example). Completion is available for component ids and component property keys.&lt;/p&gt; &lt;p&gt;&lt;img class=" aligncenter size-full wp-image-666167 " data-add-featherlight="https://developers.redhat.com/blog/wp-content/uploads/2019/12/completionProperties.gif" src="https://developers.redhat.com/blog/wp-content/uploads/2019/12/completionProperties.gif" alt="" width="877" height="402" /&gt;&lt;/p&gt; &lt;h2&gt;What&amp;#8217;s next?&lt;/h2&gt; &lt;p&gt;This is very opened for the future. There will surely be improvements directed to Apache Camel K support. The Fuse Tooling team is awaiting your feedback on &lt;a href="https://issues.redhat.com/browse/FUSETOOLS2"&gt;JIRA&lt;/a&gt;, on one of the &lt;a href="https://github.com/camel-tooling"&gt;Camel Tooling GitHub repository&lt;/a&gt;. or whatever channel you prefer. it will help drive the future roadmap.&lt;/p&gt; &lt;p&gt;&lt;a class="a2a_button_facebook" href="https://www.addtoany.com/add_to/facebook?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2019%2F12%2F16%2Fvs-code-language-support-for-apache-camel-0-0-20-release%2F&amp;#38;linkname=VS%20Code%20Language%20support%20for%20Apache%20Camel%200.0.20%20release" title="Facebook" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_twitter" href="https://www.addtoany.com/add_to/twitter?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2019%2F12%2F16%2Fvs-code-language-support-for-apache-camel-0-0-20-release%2F&amp;#38;linkname=VS%20Code%20Language%20support%20for%20Apache%20Camel%200.0.20%20release" title="Twitter" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_linkedin" href="https://www.addtoany.com/add_to/linkedin?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2019%2F12%2F16%2Fvs-code-language-support-for-apache-camel-0-0-20-release%2F&amp;#38;linkname=VS%20Code%20Language%20support%20for%20Apache%20Camel%200.0.20%20release" title="LinkedIn" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_email" href="https://www.addtoany.com/add_to/email?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2019%2F12%2F16%2Fvs-code-language-support-for-apache-camel-0-0-20-release%2F&amp;#38;linkname=VS%20Code%20Language%20support%20for%20Apache%20Camel%200.0.20%20release" title="Email" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_print" href="https://www.addtoany.com/add_to/print?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2019%2F12%2F16%2Fvs-code-language-support-for-apache-camel-0-0-20-release%2F&amp;#38;linkname=VS%20Code%20Language%20support%20for%20Apache%20Camel%200.0.20%20release" title="Print" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_reddit" href="https://www.addtoany.com/add_to/reddit?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2019%2F12%2F16%2Fvs-code-language-support-for-apache-camel-0-0-20-release%2F&amp;#38;linkname=VS%20Code%20Language%20support%20for%20Apache%20Camel%200.0.20%20release" title="Reddit" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_flipboard" href="https://www.addtoany.com/add_to/flipboard?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2019%2F12%2F16%2Fvs-code-language-support-for-apache-camel-0-0-20-release%2F&amp;#38;linkname=VS%20Code%20Language%20support%20for%20Apache%20Camel%200.0.20%20release" title="Flipboard" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_dd addtoany_share_save addtoany_share" href="https://www.addtoany.com/share#url=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2019%2F12%2F16%2Fvs-code-language-support-for-apache-camel-0-0-20-release%2F&amp;#038;title=VS%20Code%20Language%20support%20for%20Apache%20Camel%200.0.20%20release" data-a2a-url="https://developers.redhat.com/blog/2019/12/16/vs-code-language-support-for-apache-camel-0-0-20-release/" data-a2a-title="VS Code Language support for Apache Camel 0.0.20 release"&gt;&lt;img src="https://static.addtoany.com/buttons/favicon.png" alt="Share"&gt;&lt;/a&gt;&lt;/p&gt;&lt;p&gt;The post &lt;a rel="nofollow" href="https://developers.redhat.com/blog/2019/12/16/vs-code-language-support-for-apache-camel-0-0-20-release/"&gt;VS Code Language support for Apache Camel 0.0.20 release&lt;/a&gt; appeared first on &lt;a rel="nofollow" href="https://developers.redhat.com/blog"&gt;Red Hat Developer&lt;/a&gt;.&lt;/p&gt;&lt;img src="http://feeds.feedburner.com/~r/jbossbuzz/~4/h5rpEEmvtRo" height="1" width="1" alt=""/&gt;</content><summary>During the past months, several noticeable new features have been added to improve the developer experience of application based on Apache Camel. These updates are available in the 0.0.20 release of Visual Studio (VS) Code extension. Before going into the list of updates in detail, I want to note that I mentioned in the title the VS Code Extension release because VS Code extension is covering the ...</summary><dc:creator>Aurélien Pupier</dc:creator><dc:date>2019-12-16T14:59:48Z</dc:date><feedburner:origLink>https://developers.redhat.com/blog/2019/12/16/vs-code-language-support-for-apache-camel-0-0-20-release/</feedburner:origLink></entry></feed>
